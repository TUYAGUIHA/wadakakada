{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/pics/21012902/2021-02-openvpn.png","path":"pics/21012902/2021-02-openvpn.png","modified":0,"renderable":0},{"_id":"source/pics/21020102/1612320787427.jpg","path":"pics/21020102/1612320787427.jpg","modified":0,"renderable":0},{"_id":"themes/stun/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/stun/source/images/algolia.svg","path":"images/algolia.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/wada.png","path":"images/wada.png","modified":0,"renderable":1},{"_id":"themes/stun/source/js/header.js","path":"js/header.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/stun-boot.js","path":"js/stun-boot.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","path":"images/icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","path":"images/icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/logo.jpg","path":"images/icons/logo.jpg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/stun-logo.svg","path":"images/icons/stun-logo.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/wada-256x256.png","path":"images/icons/wada-256x256.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/wada-32x32.png","path":"images/icons/wada-32x32.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/wada-64x64.png","path":"images/icons/wada-64x64.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/wada.png","path":"images/icons/wada.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/pics/IMG_0021.jpg","path":"images/pics/IMG_0021.jpg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/pics/home.jpg","path":"images/pics/home.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"011236c352d92eba0d518866580e22fe05b71e58","modified":1612320839427},{"_id":"source/CNAME","hash":"29bf7e319f215363a46f19789052fae0c7ce9a14","modified":1612142950323},{"_id":"source/index.html","hash":"4d666f8dcf1dccf7c7fec39560a502edf10ec075","modified":1611912241535},{"_id":"source/_posts/.DS_Store","hash":"e7aa41a67e337a2c9332483280b5bbf52e450203","modified":1612336993041},{"_id":"source/_posts/21012901-hexo和github的实践.md","hash":"960fe5dc4e77435a39e1f2a7d3c99ebdf15f8386","modified":1612339892055},{"_id":"source/_posts/21012902-openvpn在mac上的使用.md","hash":"3abd164306a35fb2b2afba6fc63a517ee4523737","modified":1612339895239},{"_id":"source/_posts/21013001-关于ie8的兼容性.md","hash":"f02645f17ac0bdc7d4bc9426a8611f24c6ac8e53","modified":1612339911298},{"_id":"source/_posts/21020101-Nodejs的搭建.md","hash":"32ec0b15091246d5da8f2da89551756d2ed1b71c","modified":1612339915181},{"_id":"source/_posts/21020102-Git环境的搭建.md","hash":"30682eb2a5d90beb8fbaa8a5d1f21121a082bb7f","modified":1612339918045},{"_id":"source/_posts/21020201-使用Hexo搭建博客.md","hash":"3e67c17c33803cbcb166992da49a5aaa31c69814","modified":1612339923615},{"_id":"source/_posts/21020103-Git常用命令.md","hash":"dcd07e058874cd642c6f2518f406681ccee15321","modified":1612339883134},{"_id":"source/_posts/21020202-使用Hexo搭建博客.md","hash":"69a1dedfdeda24e880c42e95ecbddbad0bca87a2","modified":1612339926613},{"_id":"source/_posts/21020301-使用Hexo搭建博客.md","hash":"675832062dbeb0eabed004a6c8569db4734b8a03","modified":1612339929979},{"_id":"source/categories/index.md","hash":"869c6f4143063935a30483300440bfc3fab3b19f","modified":1611913447340},{"_id":"source/pics/.DS_Store","hash":"bfadeba7beaa892dc7fb63763a44538cbd9404b4","modified":1612164809429},{"_id":"source/tags/index.md","hash":"6eea9e24d28ec714e095a01351e3c1886912b101","modified":1611913395220},{"_id":"source/pics/21012902/2021-02-openvpn.png","hash":"56bf80a83a65a7d19fe7a24aafef74afaaf9d41f","modified":1612337201418},{"_id":"source/pics/21020102/.DS_Store","hash":"05ad381f85e4145d0d5857fd1b1dcb399352adcc","modified":1612320860764},{"_id":"source/pics/21020102/1612320787427.jpg","hash":"19aa807d5063d88fa70a3e14d8d94bff74357c16","modified":1612324078663},{"_id":"themes/stun/.DS_Store","hash":"6566a3051b43d10075f229df5d9eaf3691874796","modified":1612320823088},{"_id":"themes/stun/_config.yml","hash":"369c079f98b8f492a3a61b1e8ac3b6f4893fc898","modified":1612237026587},{"_id":"themes/stun/package.json","hash":"020d40d2fc58d74bdb79d9e1036631679733d2aa","modified":1611499394000},{"_id":"themes/stun/layout/_layout.pug","hash":"5052ee5040ae736d78ad208df7352be69b61b0d1","modified":1611499394000},{"_id":"themes/stun/layout/archive.pug","hash":"d45d078ae4196add83e21fcaed3ef168b237af90","modified":1611499394000},{"_id":"themes/stun/layout/category.pug","hash":"24153408b2971542d177227f09e93da7754bf75e","modified":1611499394000},{"_id":"themes/stun/layout/index.pug","hash":"df40cf1f051fd29f0f51ace74e9f7394f6ea2ab7","modified":1611499394000},{"_id":"themes/stun/layout/page.pug","hash":"22ba5928bd9ae8c56b3242b7caa5fc3ec471b082","modified":1611499394000},{"_id":"themes/stun/layout/post.pug","hash":"a4d16dbb919df5d4ffdb5a1d0114a4e1c8c21197","modified":1611499394000},{"_id":"themes/stun/layout/tag.pug","hash":"46f956ad7e2aed879999ddf5e768d80c4bbe5b5f","modified":1611499394000},{"_id":"themes/stun/languages/en.yml","hash":"e1348852aa00d2d57f5215c83709f6428f8e8a71","modified":1611499394000},{"_id":"themes/stun/languages/es.yml","hash":"e150c8a1f56ae9ed065611951aa124fb548577fc","modified":1611499394000},{"_id":"themes/stun/languages/zh-CN.yml","hash":"8535e2d34d24769067ba7bd3d9c0b94d1fd01cc7","modified":1611499394000},{"_id":"themes/stun/languages/zh-HK.yml","hash":"aef25f329cc05dbe8e38753fccd98d63c9fcd174","modified":1611499394000},{"_id":"themes/stun/scripts/engine.js","hash":"a63a57c9206a77a79f93dbd86e86204447d7d904","modified":1611499394000},{"_id":"themes/stun/scripts/merge-config.js","hash":"bb914100129c5ca2d1a9e087fffd7bedcb6ae6a6","modified":1611499394000},{"_id":"themes/stun/source/.DS_Store","hash":"adc9b844d22f81c96934a820507e9861942b32e7","modified":1612320829296},{"_id":"themes/stun/layout/_mixins/gallery.pug","hash":"3054e2c09bc205173c517fb1c36321f7c4c0db63","modified":1611499394000},{"_id":"themes/stun/layout/_mixins/meta-item.pug","hash":"3d74dc8ba8651efd4a605e56a21e314678d04057","modified":1611499394000},{"_id":"themes/stun/layout/_mixins/menu-item.pug","hash":"93c4454e48a6f1456c29aeb9d1332be186b49d4f","modified":1611499394000},{"_id":"themes/stun/layout/_mixins/post-header.pug","hash":"9486d07e56acf7bcc5d691bef93c19e2e5c98022","modified":1611499394000},{"_id":"themes/stun/layout/_mixins/timeline.pug","hash":"4e19a670f002d3c6bc740a2d6ef03964e6b59c09","modified":1611499394000},{"_id":"themes/stun/layout/_partials/config.pug","hash":"4fb832652485161148ea957067c06d50ed11578b","modified":1611499394000},{"_id":"themes/stun/layout/_scripts/stun.pug","hash":"961554914427578b57ea3912d751d398f4eb381d","modified":1611499394000},{"_id":"themes/stun/layout/_scripts/vendors.pug","hash":"62a6831d3b1d90d6c8335ce3402efc50e141eafb","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/pjax.pug","hash":"4a786459a8e6a4f378a9d834502f8b11aa66f185","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/quicklink.pug","hash":"2bed65ed4d314dc587e2359e20ae099b46181ed5","modified":1611499394000},{"_id":"themes/stun/scripts/filters/external-link.js","hash":"f5369becfd8cc6e43d6dc3595b1edbe014d9aa7c","modified":1611499394000},{"_id":"themes/stun/scripts/filters/image-setting.js","hash":"412318b6d189d5355dbcc52c9762072f7ecdaad4","modified":1611499394000},{"_id":"themes/stun/scripts/filters/lazyload.js","hash":"d5baf39faeff5368182be1f59fb598d023985cde","modified":1611499394000},{"_id":"themes/stun/scripts/filters/post-heading.js","hash":"b504aa047e3f080fc3f95f3e96fad88bbbce20cb","modified":1611499394000},{"_id":"themes/stun/scripts/filters/wrap-table.js","hash":"888c9eaaddcdb9b88d07837a9091aa39ed3fe677","modified":1611499394000},{"_id":"themes/stun/scripts/filters/shake-file.js","hash":"159dff6e4f7020545c9b151108398cd383d613e2","modified":1611499394000},{"_id":"themes/stun/scripts/tags/friends.js","hash":"c2fe1e8e128f464d772bcb7534efef54ad224310","modified":1611499394000},{"_id":"themes/stun/scripts/tags/table.js","hash":"177061e1bfb296981a101643f51a27ccc1469307","modified":1611499394000},{"_id":"themes/stun/scripts/tags/note.js","hash":"b436593a56e3bab8dd59c71e73ac9efbc8fa29d4","modified":1611499394000},{"_id":"themes/stun/source/css/index.styl","hash":"8a75ec81fb064b0da2f978a064cc5bec2395f27d","modified":1611499394000},{"_id":"themes/stun/source/images/.DS_Store","hash":"eb47a2cb22dda1a21ea33fb031ffb8102586807e","modified":1611901290828},{"_id":"themes/stun/source/images/algolia.svg","hash":"90322f80db6ad0daf26ea3ec71dea6f691a8b2f1","modified":1611499394000},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","hash":"017ad912874686a982ebceae359299b8f2a492e2","modified":1611499394000},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","hash":"71d035c34219f924dbf1bf852166ee8fb58d2f24","modified":1611499394000},{"_id":"themes/stun/source/images/cc-by-nc.svg","hash":"4608189edbe7636dd651df65473298a3c5afb20d","modified":1611499394000},{"_id":"themes/stun/source/images/cc-by-nd.svg","hash":"20c66ae3c393903e6eab3bc8cf7c3be6d753f9f8","modified":1611499394000},{"_id":"themes/stun/source/images/cc-by-sa.svg","hash":"0455a8857ba096925d4145a56e8d10537fccb378","modified":1611499394000},{"_id":"themes/stun/source/images/cc-by.svg","hash":"77f74c241902447424207869c74cb9d9264bdced","modified":1611499394000},{"_id":"themes/stun/source/images/loading.svg","hash":"32a6e770d217ae6c0cf0f6beef3172f1b5b9a0a2","modified":1611499394000},{"_id":"themes/stun/source/js/header.js","hash":"63d407ee6f80114e220171ba829b79b28d420fe0","modified":1611499394000},{"_id":"themes/stun/source/js/scroll.js","hash":"8926ab87181a49c730ce5132518b608c54b8cdb1","modified":1611499394000},{"_id":"themes/stun/source/js/sidebar.js","hash":"20adff7f54bcd8299d32690d41ebc7a4eb7a8728","modified":1611499394000},{"_id":"themes/stun/source/js/stun-boot.js","hash":"8358ac0d879c0ca340c52e4de606523c2a91e156","modified":1611499394000},{"_id":"themes/stun/source/js/utils.js","hash":"b570eafe77e47d7701348f172a4dbaaba6fa8123","modified":1611499394000},{"_id":"themes/stun/layout/_partials/analytics/busuanzi.pug","hash":"80d2f4f8706a96b367ac1e89f5b56ada4684d571","modified":1611499394000},{"_id":"themes/stun/layout/_partials/footer/footer.pug","hash":"9a8e56bcc504f251c13ee3d0d18a08142fb7ee43","modified":1611499394000},{"_id":"themes/stun/layout/_partials/head/head.pug","hash":"c7909a6a50c7a76a6c1810b700a5d72bcb1e20c9","modified":1611499394000},{"_id":"themes/stun/layout/_partials/head/kill-old-ie.pug","hash":"427a95d02844f29e63c5e9f014ede3609aec1a5b","modified":1611499394000},{"_id":"themes/stun/layout/_partials/header/header.pug","hash":"7ecbe18da15d3a52c56f69c542540291b6178763","modified":1611499394000},{"_id":"themes/stun/layout/_partials/post/post-list.pug","hash":"c049078009aa251fc76cd948837c7a5efdd39cb2","modified":1611499394000},{"_id":"themes/stun/layout/_partials/search/algolia.pug","hash":"61181bece0e27929fe00df5204fefd8dee31a354","modified":1611499394000},{"_id":"themes/stun/layout/_partials/search/assist-btns.pug","hash":"7e6dc0d975ccbe291116487b15277d27a391fb9a","modified":1611499394000},{"_id":"themes/stun/layout/_partials/search/index.pug","hash":"0f84aa013a96e7eb3bb25b87f20bab9b7ac55538","modified":1611499394000},{"_id":"themes/stun/layout/_partials/search/localsearch.pug","hash":"4d8e0bc33f92a603e0b2a5f4296af6bcc7cc31b8","modified":1611499394000},{"_id":"themes/stun/layout/_partials/sidebar/sidebar.pug","hash":"18173a2acf99db39748c392f2e669acd805b4090","modified":1611499394000},{"_id":"themes/stun/layout/_partials/widgets/back2top.pug","hash":"48b7fedeb472bd01fd1f3317359a10e83ca919e1","modified":1611499394000},{"_id":"themes/stun/layout/_partials/widgets/comments.pug","hash":"af1b16be74c7e1242e0f57986672dc73e93546e2","modified":1611499394000},{"_id":"themes/stun/layout/_partials/widgets/copyright.pug","hash":"0938c885697f6eb388b28ddbf88f5631d024fe73","modified":1611499394000},{"_id":"themes/stun/layout/_partials/widgets/loading-bar.pug","hash":"6cda7866f9589c9ffc05ce4a3d7c33b706e70324","modified":1611499394000},{"_id":"themes/stun/layout/_partials/widgets/night-mode.pug","hash":"c7f9bd67cd231b9bd40a84123644e009ac8d8ef3","modified":1611499394000},{"_id":"themes/stun/layout/_partials/widgets/paginator.pug","hash":"b0045dcb9b151ee31f1db5b7d741f10ef3b74be0","modified":1611499394000},{"_id":"themes/stun/layout/_partials/widgets/reward.pug","hash":"c9081c1dcf0ca18df06d23638654d8f43b28d55c","modified":1611499394000},{"_id":"themes/stun/layout/_partials/widgets/share.pug","hash":"1bb3d25298b7ee6a28150aa286ed6b0ae42ead4f","modified":1611499394000},{"_id":"themes/stun/layout/_partials/widgets/sticky-top.pug","hash":"bf86b2f9f4b1471afb8b31965d3230f6088682ae","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/advertising/google-adsense.pug","hash":"e489020f1130976d3ec2245915ede6319d89b89c","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/advertising/index.pug","hash":"1285cd65a873f688ae3c51846c1284447f502adc","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/analytics/baidu-analytics.pug","hash":"f7300991a29dbe2e8091a588dfa8c65c3dee6302","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/analytics/busuanzi.pug","hash":"78a4fc9c9380e31536f5b500638f2d005accd361","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/analytics/google-analytics.pug","hash":"4eef66fbb8a8ad55e0868cf4b77a6b7bca0e7f35","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/analytics/index.pug","hash":"0d72f844bf9532b3be644c27b0af7cb4331fc46c","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/analytics/tencent-analytics.pug","hash":"f88fb0f085812db6023c30308ba3458da7742993","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/comments/disqus.pug","hash":"57bcbaac3d237d9168dd8f4b682f34351f11d250","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/comments/fbcomments.pug","hash":"fb651812c87dc5e2134d7fb7d8f98d4d4227f1f6","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/comments/gitalk.pug","hash":"c2a90e80c51b5b99e6804dbed5457a071b980bbd","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/comments/index.pug","hash":"bec4d9c8ea360637e7da3314fa987e33facd8071","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/comments/livere.pug","hash":"687f74a998519608944b40a41f3a98ccf4535139","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/comments/minivaline.pug","hash":"5584ade7dd19deca418373115bde9d563d37d826","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/comments/utterances.pug","hash":"6418baeb3aedcddb02a64bd89b26ac12e18551c8","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/comments/valine.pug","hash":"b519a6948d6ef37c037385e3e3f9590c17f7ad62","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/comments/waline.pug","hash":"fd4c958b13777752f176556c7b109b7dede7cc68","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/math/index.pug","hash":"e952be6c736545e73c0e02f833f87a4f8c5a2582","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/math/katex.pug","hash":"345c59fe76a7c83b529328e5144d1036cb14f533","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/math/mathjax.pug","hash":"72d51538cc85f01c8c64db74b9219ccaf334c9e9","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/search/algolia.pug","hash":"54233748e22ceae063f70ee49b44c4bd0a78f391","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/search/index.pug","hash":"0f84aa013a96e7eb3bb25b87f20bab9b7ac55538","modified":1611499394000},{"_id":"themes/stun/layout/_third-party/search/localsearch.pug","hash":"d98db7ed7e3e4c574212fa9d75adba681f3d0687","modified":1611499394000},{"_id":"themes/stun/source/css/_common/index.styl","hash":"86057db6cb18263866d62a6669feee8752882398","modified":1611499394000},{"_id":"themes/stun/source/css/_common/responsive.styl","hash":"618c6005f1bc7c482fa37ae3ce15729a64044d9d","modified":1611499394000},{"_id":"themes/stun/source/css/_custom/index.styl","hash":"0d1adc70250941074c742f94f7801b3b43a7f1db","modified":1611499394000},{"_id":"themes/stun/source/css/_mixins/index.styl","hash":"f3060519f3acd05cb4b26bb5f6a5c6b857cb0d68","modified":1611499394000},{"_id":"themes/stun/source/css/_variables/index.styl","hash":"c81aac4285eb058026b255e31282d35f55a820ab","modified":1611499394000},{"_id":"themes/stun/source/images/icons/.DS_Store","hash":"42ac19eb33db6ee29073b51c70b43e9675c1a960","modified":1612173199794},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","hash":"7bfd64eac26e17ea162f0c399a4a40164c26b412","modified":1611499394000},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","hash":"02fead07726920400ede57ddfdbf071dd7203fd5","modified":1611499394000},{"_id":"themes/stun/source/images/icons/logo.jpg","hash":"eab30262dd739a51aba2ab0de8c987b7a328ba52","modified":1612171690741},{"_id":"themes/stun/source/images/icons/stun-logo.svg","hash":"069dc7590ad152373f1c346d892e32faa2bbdd87","modified":1611499394000},{"_id":"themes/stun/source/images/icons/wada-32x32.png","hash":"0cd7f5a9a6bd9fc40a4b787416fc5657e6c7d60e","modified":1611811973201},{"_id":"themes/stun/source/images/icons/wada-64x64.png","hash":"447441852e93e5b1aa765347041c606dfe8c28ae","modified":1612141394127},{"_id":"themes/stun/source/images/icons/wada-256x256.png","hash":"0c06affae4a3235e8823d11492830f4c53dccd6f","modified":1612141563026},{"_id":"themes/stun/source/css/_common/components/index.styl","hash":"a54720db94121efd1a34ac88d344197c8206837e","modified":1611499394000},{"_id":"themes/stun/source/css/_common/outline/index.styl","hash":"467d4171c0690a95d40fbecea02e6b212b7c74f1","modified":1611499394000},{"_id":"themes/stun/source/css/_common/outline/macro.styl","hash":"13b96f239de15e1cfdc14d9c80e6959506556dd2","modified":1611499394000},{"_id":"themes/stun/source/css/_common/scaffolding/index.styl","hash":"e750f2dae9eb3385039ee018ff8001b0e6ec3b64","modified":1611499394000},{"_id":"themes/stun/source/css/_common/scaffolding/base.styl","hash":"4064a7e2c3f71d2ed72a47edd60e9be01af6c354","modified":1611499394000},{"_id":"themes/stun/source/css/_common/scaffolding/normalize.styl","hash":"c15a9616fddb267431416304d709185aeb3d45f5","modified":1611499394000},{"_id":"themes/stun/source/css/_common/scaffolding/utils.styl","hash":"7e62f34521ea539a25a101f25e1684e3a3ac4be8","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/analytics/busuanzi.styl","hash":"d196c88ea2e9b851e8d8f9c5a315dfc2929eb897","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/analytics/index.styl","hash":"339a43fd5ee97a77775b723118f6ab1af754fed4","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/footer/index.styl","hash":"14464841145cf3ecab66f1094653daa033c261eb","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/header/index.styl","hash":"904af0e73cdf0767ec781271856d7b5b63e043ef","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/highlight/diff.styl","hash":"056e70f6dfe45ec50427d7ab293d33361c9b956f","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/highlight/highlight.styl","hash":"bc0b01021a0d19b2c98f0c5c9fa1af96d67c1099","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/highlight/index.styl","hash":"85848179cbc78152d2521b601ac9f888dea4e255","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/highlight/theme.styl","hash":"dfc99b05302f8203040431e563c9f63d63da46de","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/pages/index.styl","hash":"463a4e6a92ec5f757e167fbeb171e4e92e83a822","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/pages/page.styl","hash":"df732e267dfd9f1bda6a8cf1ede3198a205925f9","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/pages/timeline.styl","hash":"21e9c8def1613030f0927e2ce80f4ecc721f078e","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/plugins/friends.styl","hash":"bdb015173f8e5fa391fc4fb2b2a8d42787022c4b","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/plugins/index.styl","hash":"c35d0cf421c6669ee0458c2f0264dca05769c01d","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/plugins/note.styl","hash":"ae0ad9b44a87839d220792336478a9ae6db11c47","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/plugins/table.styl","hash":"98cacc91e42f5e45279e2174a90ab26171085e2f","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/post/index.styl","hash":"08aad11e329cda0550efef226e0c4d0bb4540454","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/post/post-list.styl","hash":"d0ed844e28533f832cbd9b3f09203d16936628f7","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/post/post.styl","hash":"8b7b22225b40d028efee689d3700a9796291cb8d","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/search/algolia.styl","hash":"fb62e4baf25a66e46c27783be5d79353ec394b44","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/search/common.styl","hash":"1939b7dfbcf557794a188fbf8fec4ef2b5afa437","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/search/index.styl","hash":"1990d2c2a9bfe8e09d656f0c2ae6cf0c9f7f5542","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/search/localsearch.styl","hash":"bf1ac1b8ee8c4daaa7e6b47eec097a176624e6d0","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/sidebar/index.styl","hash":"02138647437f7e8ee8927cae225d41072d936bdc","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/back2top.styl","hash":"b3da5ea71a9947e781056d1bd7d42e4045fa2aca","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/comments.styl","hash":"41d229ac4fa02a3a8b46687ccbafa7a608008e2f","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/copy-button.styl","hash":"378961fa7c986e3313053814806902bf76204a93","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/copyright.styl","hash":"1d28fc8f76f7164a306ed81a9ede21c0a2b0f7cd","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/ending.styl","hash":"63985ca9a3f6c481cc60207966fa1267de14d945","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/fancybox.styl","hash":"3d677c0323d77199bb9fbfefd65e97d8b882d7b3","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/font-icon.styl","hash":"bdda0953611378e93a8d6387cbdc93e1de4f7f0a","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/gallery-image.styl","hash":"99b1cc42f38816083f93233778b299422b6d8f32","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/index.styl","hash":"03ffdc55fd5fb64c3158bc222d0e8e9d7844686b","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/lazyload.styl","hash":"eced96235f0ff5dc6a8fd068d4ed05934a29b430","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/loading-bar.styl","hash":"9f23e8762d01fb4a3cbf5e786fdead2926849e8a","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/night-mode.styl","hash":"9caeef13a913aba38976f082e1f0ca191bffc64e","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/paginator.styl","hash":"71ddb6a1e9664a4fde04a0ce143b8786ba6e0089","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/reward.styl","hash":"de1130ec3765879884cbdc77a15b458da6e37bcc","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/share.styl","hash":"fe32e3434107d92cefd7aacfdcef526a93c4b865","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/sticky-top.styl","hash":"f0e37944168a74a64b18dc54c6fde2308e4bf023","modified":1611499394000},{"_id":"themes/stun/source/css/_common/components/widgets/zoom-image.styl","hash":"40f832a199320642debabe32910c1168e3c6e40c","modified":1611499394000},{"_id":"themes/stun/source/images/pics/home.jpg","hash":"7c5f90094478a51492cb093065db3e4b828e852f","modified":1581383223510},{"_id":"themes/stun/source/images/pics/IMG_0021.jpg","hash":"5fa30d05130a3b0014916002f1b71e1651b5189f","modified":1612236564856},{"_id":"themes/stun/source/images/icons/wada.png","hash":"dd84263c9cc6d51608380269a02602fffe0a0480","modified":1611811648104},{"_id":"themes/stun/source/images/wada.png","hash":"dd84263c9cc6d51608380269a02602fffe0a0480","modified":1611811648104},{"_id":"public/categories/index.html","hash":"a952d28606c69c9eafcad41280d3cb8a33d54092","modified":1612339334670},{"_id":"public/tags/index.html","hash":"58c9ac45c781402b56020177dbff954e0c15107b","modified":1612339334670},{"_id":"public/post/ab48c5d0.html","hash":"7f56c96acf0d70b4dd62ad7acbc3c0738d106b68","modified":1612339334670},{"_id":"public/post/808168d2.html","hash":"43a189d5d015dcb0d561998e749b1382aac5105b","modified":1612339334670},{"_id":"public/post/42dc65b0.html","hash":"c109532fe6f2efe335b3407bd5c12e83b302e3f2","modified":1612339334670},{"_id":"public/post/9e212a55.html","hash":"5898ef630483200fb3993e0662c441e17e422b9b","modified":1612339334670},{"_id":"public/post/eb656981.html","hash":"e41f6f77c2917587d36786a789fe5e73d3a09044","modified":1612339334670},{"_id":"public/post/27bfeede.html","hash":"d486f424b9500da28f2a0a8cf68744be97dd0ed6","modified":1612339334670},{"_id":"public/post/6f6fbad6.html","hash":"e885cffb2fccf81db75cec7168266637a3269d61","modified":1612339334670},{"_id":"public/post/6c64cc02.html","hash":"2e01384d8049cb020d26d065d9b75bf5c007bcef","modified":1612339334670},{"_id":"public/archives/index.html","hash":"1a716563d2a3208ca07e20bd020a934a29a395d0","modified":1612339334670},{"_id":"public/archives/page/2/index.html","hash":"31812e233a05bad313961ea39135a995b1d6d888","modified":1612339334670},{"_id":"public/archives/2021/index.html","hash":"5845882b1a1b49c6d69b4e4f8014c840cac9a9bd","modified":1612339334670},{"_id":"public/archives/2021/02/index.html","hash":"54b66f5c0de11c6affd8b733b86b610ad253fc80","modified":1612339334670},{"_id":"public/archives/2021/page/2/index.html","hash":"1938173152c7aae33fa2df1bff838ff52cf77dd4","modified":1612339334670},{"_id":"public/archives/2021/02/page/2/index.html","hash":"7d2609a339457e00e97dd365aea036b23a40b053","modified":1612339334670},{"_id":"public/categories/杂谈/index.html","hash":"d88e2613df935ff42fed34ab7e092d0b7a0988fc","modified":1612339334670},{"_id":"public/categories/IT/index.html","hash":"b237eead3d60feb5c25d60956e043c93bff0033f","modified":1612339334670},{"_id":"public/categories/IT/page/2/index.html","hash":"e10dc1b8fe55cc56b5481788c6265b012bef095d","modified":1612339334670},{"_id":"public/tags/杂谈/index.html","hash":"f8d9add84bb13af2b1dd3a5400df6c8dbd5e41c7","modified":1612339334670},{"_id":"public/tags/开发工具/index.html","hash":"d060a543888a2c30b1761e3a9377341fbaae5476","modified":1612339334670},{"_id":"public/tags/前端/index.html","hash":"41fe849e5f85de0426ac403204f02872202e56ef","modified":1612339334670},{"_id":"public/tags/Hexo/index.html","hash":"87f7e634c7e92a5cafd5976b4221fe2edcf39cd4","modified":1612339334670},{"_id":"public/tags/Git/index.html","hash":"db0a89dad61fe343905560c0a8898abaf0d71034","modified":1612339334670},{"_id":"public/index.html","hash":"14f3a333f8110735e122155734324855b3bcdedf","modified":1612339334670},{"_id":"public/post/5aedbe48.html","hash":"c055a2bf08a5cf5c52965349cf0283b300265def","modified":1612339334670},{"_id":"public/CNAME","hash":"29bf7e319f215363a46f19789052fae0c7ce9a14","modified":1612339334670},{"_id":"public/images/algolia.svg","hash":"90322f80db6ad0daf26ea3ec71dea6f691a8b2f1","modified":1612339334670},{"_id":"public/images/cc-by-nc-nd.svg","hash":"017ad912874686a982ebceae359299b8f2a492e2","modified":1612339334670},{"_id":"public/images/cc-by-nc-sa.svg","hash":"71d035c34219f924dbf1bf852166ee8fb58d2f24","modified":1612339334670},{"_id":"public/images/cc-by-nc.svg","hash":"4608189edbe7636dd651df65473298a3c5afb20d","modified":1612339334670},{"_id":"public/images/cc-by-nd.svg","hash":"20c66ae3c393903e6eab3bc8cf7c3be6d753f9f8","modified":1612339334670},{"_id":"public/images/cc-by-sa.svg","hash":"0455a8857ba096925d4145a56e8d10537fccb378","modified":1612339334670},{"_id":"public/images/cc-by.svg","hash":"77f74c241902447424207869c74cb9d9264bdced","modified":1612339334670},{"_id":"public/images/loading.svg","hash":"32a6e770d217ae6c0cf0f6beef3172f1b5b9a0a2","modified":1612339334670},{"_id":"public/images/icons/favicon-16x16.png","hash":"7bfd64eac26e17ea162f0c399a4a40164c26b412","modified":1612339334670},{"_id":"public/images/icons/favicon-32x32.png","hash":"02fead07726920400ede57ddfdbf071dd7203fd5","modified":1612339334670},{"_id":"public/images/icons/logo.jpg","hash":"eab30262dd739a51aba2ab0de8c987b7a328ba52","modified":1612339334670},{"_id":"public/images/icons/stun-logo.svg","hash":"069dc7590ad152373f1c346d892e32faa2bbdd87","modified":1612339334670},{"_id":"public/images/icons/wada-256x256.png","hash":"0c06affae4a3235e8823d11492830f4c53dccd6f","modified":1612339334670},{"_id":"public/images/icons/wada-32x32.png","hash":"0cd7f5a9a6bd9fc40a4b787416fc5657e6c7d60e","modified":1612339334670},{"_id":"public/images/icons/wada-64x64.png","hash":"447441852e93e5b1aa765347041c606dfe8c28ae","modified":1612339334670},{"_id":"public/pics/21012902/2021-02-openvpn.png","hash":"56bf80a83a65a7d19fe7a24aafef74afaaf9d41f","modified":1612339334670},{"_id":"public/js/header.js","hash":"63d407ee6f80114e220171ba829b79b28d420fe0","modified":1612339334670},{"_id":"public/js/scroll.js","hash":"8926ab87181a49c730ce5132518b608c54b8cdb1","modified":1612339334670},{"_id":"public/js/sidebar.js","hash":"20adff7f54bcd8299d32690d41ebc7a4eb7a8728","modified":1612339334670},{"_id":"public/js/stun-boot.js","hash":"8358ac0d879c0ca340c52e4de606523c2a91e156","modified":1612339334670},{"_id":"public/css/index.css","hash":"25e51ad39a9b9be2b04b512cd166a53387258d47","modified":1612339334670},{"_id":"public/images/pics/home.jpg","hash":"7c5f90094478a51492cb093065db3e4b828e852f","modified":1612339334670},{"_id":"public/js/utils.js","hash":"b570eafe77e47d7701348f172a4dbaaba6fa8123","modified":1612339334670},{"_id":"public/pics/21020102/1612320787427.jpg","hash":"19aa807d5063d88fa70a3e14d8d94bff74357c16","modified":1612339334670},{"_id":"public/images/pics/IMG_0021.jpg","hash":"5fa30d05130a3b0014916002f1b71e1651b5189f","modified":1612339334670},{"_id":"public/images/wada.png","hash":"dd84263c9cc6d51608380269a02602fffe0a0480","modified":1612339334670},{"_id":"public/images/icons/wada.png","hash":"dd84263c9cc6d51608380269a02602fffe0a0480","modified":1612339334670}],"Category":[{"name":"杂谈","_id":"ckkp57l260004284jaf9aekle"},{"name":"IT","_id":"ckkp57l2a000a284j6sr440o4"}],"Data":[],"Page":[{"_content":"<html>\n\n<head>\n<title>我的第一个 HTML 页面</title>\n</head>\n\n<body>\n<p>body 元素的内容会显示在浏览器中。</p>\n<p>title 元素的内容会显示在浏览器的标题栏中。</p>\n<p>title 元素的内容会显示在浏览器的标题栏中。</p>\n<p>title 元素的内容会显示在浏览器的标题栏中。</p>\n<p>title 元素的内容会显示在浏览器的标题栏中。</p>\n</body>\n\n</html>\n","source":"index.html","raw":"<html>\n\n<head>\n<title>我的第一个 HTML 页面</title>\n</head>\n\n<body>\n<p>body 元素的内容会显示在浏览器中。</p>\n<p>title 元素的内容会显示在浏览器的标题栏中。</p>\n<p>title 元素的内容会显示在浏览器的标题栏中。</p>\n<p>title 元素的内容会显示在浏览器的标题栏中。</p>\n<p>title 元素的内容会显示在浏览器的标题栏中。</p>\n</body>\n\n</html>\n","date":"2021-01-29T09:24:01.535Z","updated":"2021-01-29T09:24:01.535Z","path":"index.html","title":"","comments":1,"layout":"page","_id":"ckkp57l210000284j8l7q3j4j","content":"<html>\n\n<head>\n<title>我的第一个 HTML 页面</title>\n</head>\n\n<body>\n<p>body 元素的内容会显示在浏览器中。</p>\n<p>title 元素的内容会显示在浏览器的标题栏中。</p>\n<p>title 元素的内容会显示在浏览器的标题栏中。</p>\n<p>title 元素的内容会显示在浏览器的标题栏中。</p>\n<p>title 元素的内容会显示在浏览器的标题栏中。</p>\n</body>\n\n</html>\n","site":{"data":{}},"excerpt":"","more":"<html>\n\n<head>\n<title>我的第一个 HTML 页面</title>\n</head>\n\n<body>\n<p>body 元素的内容会显示在浏览器中。</p>\n<p>title 元素的内容会显示在浏览器的标题栏中。</p>\n<p>title 元素的内容会显示在浏览器的标题栏中。</p>\n<p>title 元素的内容会显示在浏览器的标题栏中。</p>\n<p>title 元素的内容会显示在浏览器的标题栏中。</p>\n</body>\n\n</html>\n"},{"title":"categories","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: categories\n---\n","date":"2021-01-29T09:44:07.340Z","updated":"2021-01-29T09:44:07.340Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckkp57l250002284j3q684ftf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\n---\n","date":"2021-01-29T09:43:15.220Z","updated":"2021-01-29T09:43:15.220Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckkp57l280006284j2rt4czmc","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"建站第一篇，这个博客的由来","urlname":"建站第一篇，这个博客的由来","description":"附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面","top":true,"date":"2021-01-28T16:00:00.000Z","abbrlink":"27bfeede","_content":"\n## Hexo + github 建立个人博客\n        原本是通过阿里云服务器，让后端朋友写了后端的增删改查服务，然后自己写页面来搭建了自己的个人网站。\n        但是个人服务器的带宽太小，一些图片加载太慢了，导致整个网站的速度极其卡顿，一点都不想打开，所以考虑通过现有的博客搭建，只专注内容就好了。\n        最后选择Hexo建博客，也只是试试，如果以后有更好的选择，也许就换掉了。\n<!-- more -->\n## 通过Hexo搭建\n1. 因为以前做过node.js的开发，所以npm相关都是齐全的，不用再安装了，但是需要升级，不过电脑上的其他项目，npm的版本也会有影响，所以升级前要注意这个问题：\n\n    升级npm：`npm install -g npm`  \n    升级至指定版本：`npm -g install npm@6.8.0`  \n2. 通过npm安装Hexo:  `npm install -g hexo-cli`\n3. 在当前路径下，创建名为‘blog’的Hexo项目文件夹：`hexo init blog` \n4. 进入‘blog’文件夹：`cd blog` \n5. 安装依赖： `npm install` \n\n    安装完成后项目结构为：\n    - node_modules: 依赖包（通过执行 `npm install` 命令，产生的文件夹）\n    - public：存放生成的页面（后续环节中通个 `hexo g` 命令生成）\n    - scaffolds：生成文章的一些模板\n    - source：用来存放你的文章（默认文章为`.md`结尾的Markdown格式的文件，存放于当前文件夹下的`_posts`文件夹中）\n    - themes：主题\n    - _config.yml: 博客的配置文件\n    - 其他文件就不要乱动了 \n\n6. 将当前的代码文件打包：`hexo g` （会生成‘public’文件夹）\n7. 开启Hexo服务：`hexo s` (可在本地访问：http://localhost:4000)\n----------\n## github的仓库\n1. 在github上创建一个空的公开仓库\n2. 将仓库的地址，放在当前项目文件夹下`_config.yml`中（/blog/_config.yml）\n\n----------\n## 再开发时候的操作\n1. git clone 代码 \n2. npm install \n3. 安装主题：npm install --save hexo-renderer-pug \n4. 安装git：npm install hexo-deployer-git --save \n5. 执行 hexo g 生成编译文件 \n6. 执行 hexo d 上传编译文件\n\n----------\n## 小结\n    好麻烦啊。。。。所说个性化定制挺好的，但是各种要配置的，主题也是，看起来怪怪的，写的文章，超链接什么的也不好弄。。。[苦涩]","source":"_posts/21012901-hexo和github的实践.md","raw":"---\ntitle: 建站第一篇，这个博客的由来\nurlname: 建站第一篇，这个博客的由来\ntags:\n  - 杂谈\ncategories:\n  - 杂谈\ndescription: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面\ntop: true\ndate: 2021-01-29\nabbrlink: 27bfeede\n---\n\n## Hexo + github 建立个人博客\n        原本是通过阿里云服务器，让后端朋友写了后端的增删改查服务，然后自己写页面来搭建了自己的个人网站。\n        但是个人服务器的带宽太小，一些图片加载太慢了，导致整个网站的速度极其卡顿，一点都不想打开，所以考虑通过现有的博客搭建，只专注内容就好了。\n        最后选择Hexo建博客，也只是试试，如果以后有更好的选择，也许就换掉了。\n<!-- more -->\n## 通过Hexo搭建\n1. 因为以前做过node.js的开发，所以npm相关都是齐全的，不用再安装了，但是需要升级，不过电脑上的其他项目，npm的版本也会有影响，所以升级前要注意这个问题：\n\n    升级npm：`npm install -g npm`  \n    升级至指定版本：`npm -g install npm@6.8.0`  \n2. 通过npm安装Hexo:  `npm install -g hexo-cli`\n3. 在当前路径下，创建名为‘blog’的Hexo项目文件夹：`hexo init blog` \n4. 进入‘blog’文件夹：`cd blog` \n5. 安装依赖： `npm install` \n\n    安装完成后项目结构为：\n    - node_modules: 依赖包（通过执行 `npm install` 命令，产生的文件夹）\n    - public：存放生成的页面（后续环节中通个 `hexo g` 命令生成）\n    - scaffolds：生成文章的一些模板\n    - source：用来存放你的文章（默认文章为`.md`结尾的Markdown格式的文件，存放于当前文件夹下的`_posts`文件夹中）\n    - themes：主题\n    - _config.yml: 博客的配置文件\n    - 其他文件就不要乱动了 \n\n6. 将当前的代码文件打包：`hexo g` （会生成‘public’文件夹）\n7. 开启Hexo服务：`hexo s` (可在本地访问：http://localhost:4000)\n----------\n## github的仓库\n1. 在github上创建一个空的公开仓库\n2. 将仓库的地址，放在当前项目文件夹下`_config.yml`中（/blog/_config.yml）\n\n----------\n## 再开发时候的操作\n1. git clone 代码 \n2. npm install \n3. 安装主题：npm install --save hexo-renderer-pug \n4. 安装git：npm install hexo-deployer-git --save \n5. 执行 hexo g 生成编译文件 \n6. 执行 hexo d 上传编译文件\n\n----------\n## 小结\n    好麻烦啊。。。。所说个性化定制挺好的，但是各种要配置的，主题也是，看起来怪怪的，写的文章，超链接什么的也不好弄。。。[苦涩]","slug":"21012901-hexo和github的实践","published":1,"updated":"2021-02-03T08:11:32.055Z","_id":"ckkp57l230001284j7281dcxl","comments":1,"layout":"post","photos":[],"link":"","content":"\n        <h2 id=\"Hexo-github-建立个人博客\"   >\n          <a href=\"#Hexo-github-建立个人博客\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Hexo-github-建立个人博客\" class=\"headerlink\" title=\"Hexo + github 建立个人博客\"></a>Hexo + github 建立个人博客</h2>\n      <pre><code>    原本是通过阿里云服务器，让后端朋友写了后端的增删改查服务，然后自己写页面来搭建了自己的个人网站。\n    但是个人服务器的带宽太小，一些图片加载太慢了，导致整个网站的速度极其卡顿，一点都不想打开，所以考虑通过现有的博客搭建，只专注内容就好了。\n    最后选择Hexo建博客，也只是试试，如果以后有更好的选择，也许就换掉了。</code></pre>\n<a id=\"more\"></a>\n\n        <h2 id=\"通过Hexo搭建\"   >\n          <a href=\"#通过Hexo搭建\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#通过Hexo搭建\" class=\"headerlink\" title=\"通过Hexo搭建\"></a>通过Hexo搭建</h2>\n      <ol>\n<li><p>因为以前做过node.js的开发，所以npm相关都是齐全的，不用再安装了，但是需要升级，不过电脑上的其他项目，npm的版本也会有影响，所以升级前要注意这个问题：</p>\n<p> 升级npm：<code>npm install -g npm</code><br> 升级至指定版本：<code>npm -g install npm@6.8.0</code>  </p>\n</li>\n<li><p>通过npm安装Hexo:  <code>npm install -g hexo-cli</code></p>\n</li>\n<li><p>在当前路径下，创建名为‘blog’的Hexo项目文件夹：<code>hexo init blog</code> </p>\n</li>\n<li><p>进入‘blog’文件夹：<code>cd blog</code> </p>\n</li>\n<li><p>安装依赖： <code>npm install</code> </p>\n<p> 安装完成后项目结构为：</p>\n<ul>\n<li>node_modules: 依赖包（通过执行 <code>npm install</code> 命令，产生的文件夹）</li>\n<li>public：存放生成的页面（后续环节中通个 <code>hexo g</code> 命令生成）</li>\n<li>scaffolds：生成文章的一些模板</li>\n<li>source：用来存放你的文章（默认文章为<code>.md</code>结尾的Markdown格式的文件，存放于当前文件夹下的<code>_posts</code>文件夹中）</li>\n<li>themes：主题</li>\n<li>_config.yml: 博客的配置文件</li>\n<li>其他文件就不要乱动了 </li>\n</ul>\n</li>\n<li><p>将当前的代码文件打包：<code>hexo g</code> （会生成‘public’文件夹）</p>\n</li>\n<li><p>开启Hexo服务：<code>hexo s</code> (可在本地访问：<span class=\"exturl\"><a class=\"exturl__link\"   href=\"http://localhost:4000/\" >http://localhost:4000</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span>)</p>\n</li>\n</ol>\n<hr>\n\n        <h2 id=\"github的仓库\"   >\n          <a href=\"#github的仓库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#github的仓库\" class=\"headerlink\" title=\"github的仓库\"></a>github的仓库</h2>\n      <ol>\n<li>在github上创建一个空的公开仓库</li>\n<li>将仓库的地址，放在当前项目文件夹下<code>_config.yml</code>中（/blog/_config.yml）</li>\n</ol>\n<hr>\n\n        <h2 id=\"再开发时候的操作\"   >\n          <a href=\"#再开发时候的操作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#再开发时候的操作\" class=\"headerlink\" title=\"再开发时候的操作\"></a>再开发时候的操作</h2>\n      <ol>\n<li>git clone 代码 </li>\n<li>npm install </li>\n<li>安装主题：npm install –save hexo-renderer-pug </li>\n<li>安装git：npm install hexo-deployer-git –save </li>\n<li>执行 hexo g 生成编译文件 </li>\n<li>执行 hexo d 上传编译文件</li>\n</ol>\n<hr>\n\n        <h2 id=\"小结\"   >\n          <a href=\"#小结\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2>\n      <pre><code>好麻烦啊。。。。所说个性化定制挺好的，但是各种要配置的，主题也是，看起来怪怪的，写的文章，超链接什么的也不好弄。。。[苦涩]</code></pre>\n","site":{"data":{}},"excerpt":"<h2 id=\"Hexo-github-建立个人博客\"   >\n          <a href=\"#Hexo-github-建立个人博客\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Hexo-github-建立个人博客\" class=\"headerlink\" title=\"Hexo + github 建立个人博客\"></a>Hexo + github 建立个人博客</h2>\n      <pre><code>    原本是通过阿里云服务器，让后端朋友写了后端的增删改查服务，然后自己写页面来搭建了自己的个人网站。\n    但是个人服务器的带宽太小，一些图片加载太慢了，导致整个网站的速度极其卡顿，一点都不想打开，所以考虑通过现有的博客搭建，只专注内容就好了。\n    最后选择Hexo建博客，也只是试试，如果以后有更好的选择，也许就换掉了。</code></pre>","more":"<h2 id=\"通过Hexo搭建\"   >\n          <a href=\"#通过Hexo搭建\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#通过Hexo搭建\" class=\"headerlink\" title=\"通过Hexo搭建\"></a>通过Hexo搭建</h2>\n      <ol>\n<li><p>因为以前做过node.js的开发，所以npm相关都是齐全的，不用再安装了，但是需要升级，不过电脑上的其他项目，npm的版本也会有影响，所以升级前要注意这个问题：</p>\n<p> 升级npm：<code>npm install -g npm</code><br> 升级至指定版本：<code>npm -g install npm@6.8.0</code>  </p>\n</li>\n<li><p>通过npm安装Hexo:  <code>npm install -g hexo-cli</code></p>\n</li>\n<li><p>在当前路径下，创建名为‘blog’的Hexo项目文件夹：<code>hexo init blog</code> </p>\n</li>\n<li><p>进入‘blog’文件夹：<code>cd blog</code> </p>\n</li>\n<li><p>安装依赖： <code>npm install</code> </p>\n<p> 安装完成后项目结构为：</p>\n<ul>\n<li>node_modules: 依赖包（通过执行 <code>npm install</code> 命令，产生的文件夹）</li>\n<li>public：存放生成的页面（后续环节中通个 <code>hexo g</code> 命令生成）</li>\n<li>scaffolds：生成文章的一些模板</li>\n<li>source：用来存放你的文章（默认文章为<code>.md</code>结尾的Markdown格式的文件，存放于当前文件夹下的<code>_posts</code>文件夹中）</li>\n<li>themes：主题</li>\n<li>_config.yml: 博客的配置文件</li>\n<li>其他文件就不要乱动了 </li>\n</ul>\n</li>\n<li><p>将当前的代码文件打包：<code>hexo g</code> （会生成‘public’文件夹）</p>\n</li>\n<li><p>开启Hexo服务：<code>hexo s</code> (可在本地访问：<span class=\"exturl\"><a class=\"exturl__link\"   href=\"http://localhost:4000/\" >http://localhost:4000</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span>)</p>\n</li>\n</ol>\n<hr>\n\n        <h2 id=\"github的仓库\"   >\n          <a href=\"#github的仓库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#github的仓库\" class=\"headerlink\" title=\"github的仓库\"></a>github的仓库</h2>\n      <ol>\n<li>在github上创建一个空的公开仓库</li>\n<li>将仓库的地址，放在当前项目文件夹下<code>_config.yml</code>中（/blog/_config.yml）</li>\n</ol>\n<hr>\n\n        <h2 id=\"再开发时候的操作\"   >\n          <a href=\"#再开发时候的操作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#再开发时候的操作\" class=\"headerlink\" title=\"再开发时候的操作\"></a>再开发时候的操作</h2>\n      <ol>\n<li>git clone 代码 </li>\n<li>npm install </li>\n<li>安装主题：npm install –save hexo-renderer-pug </li>\n<li>安装git：npm install hexo-deployer-git –save </li>\n<li>执行 hexo g 生成编译文件 </li>\n<li>执行 hexo d 上传编译文件</li>\n</ol>\n<hr>\n\n        <h2 id=\"小结\"   >\n          <a href=\"#小结\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2>\n      <pre><code>好麻烦啊。。。。所说个性化定制挺好的，但是各种要配置的，主题也是，看起来怪怪的，写的文章，超链接什么的也不好弄。。。[苦涩]</code></pre>"},{"title":"openvpn在mac上的使用","urlname":"openvpn在mac上的使用","date":"2021-01-28T16:00:00.000Z","abbrlink":"6f6fbad6","_content":"## 通过修改配置文件，用以适用mac版的openVpn工具\n![](/pics/21012902/2021-02-openvpn.png)\n<!-- more -->\n1. 下载Tunnelblick\n2. 修改opvn的配置文件\n3. 注释掉client.ovpn中的ip-win32 dynamic -1\n4. 将三个配置文件打包成.tblk后缀名的文件\n5. 在Tunnelblick中，添加该文件\n6. 修改openvpn版本为：2.3.18LibreSSL\n7. 点击“连接”","source":"_posts/21012902-openvpn在mac上的使用.md","raw":"---\ntitle: openvpn在mac上的使用\nurlname: openvpn在mac上的使用\ntags:\n  - 开发工具\ncategories: IT\ndate: 2021-01-29\nabbrlink: 6f6fbad6\n---\n## 通过修改配置文件，用以适用mac版的openVpn工具\n![](/pics/21012902/2021-02-openvpn.png)\n<!-- more -->\n1. 下载Tunnelblick\n2. 修改opvn的配置文件\n3. 注释掉client.ovpn中的ip-win32 dynamic -1\n4. 将三个配置文件打包成.tblk后缀名的文件\n5. 在Tunnelblick中，添加该文件\n6. 修改openvpn版本为：2.3.18LibreSSL\n7. 点击“连接”","slug":"21012902-openvpn在mac上的使用","published":1,"updated":"2021-02-03T08:11:35.239Z","_id":"ckkp57l250003284jcy8s31ie","comments":1,"layout":"post","photos":[],"link":"","content":"\n        <h2 id=\"通过修改配置文件，用以适用mac版的openVpn工具\"   >\n          <a href=\"#通过修改配置文件，用以适用mac版的openVpn工具\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#通过修改配置文件，用以适用mac版的openVpn工具\" class=\"headerlink\" title=\"通过修改配置文件，用以适用mac版的openVpn工具\"></a>通过修改配置文件，用以适用mac版的openVpn工具</h2>\n      <p><img src=\"/pics/21012902/2021-02-openvpn.png\"></p>\n<a id=\"more\"></a>\n<ol>\n<li>下载Tunnelblick</li>\n<li>修改opvn的配置文件</li>\n<li>注释掉client.ovpn中的ip-win32 dynamic -1</li>\n<li>将三个配置文件打包成.tblk后缀名的文件</li>\n<li>在Tunnelblick中，添加该文件</li>\n<li>修改openvpn版本为：2.3.18LibreSSL</li>\n<li>点击“连接”</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"通过修改配置文件，用以适用mac版的openVpn工具\"   >\n          <a href=\"#通过修改配置文件，用以适用mac版的openVpn工具\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#通过修改配置文件，用以适用mac版的openVpn工具\" class=\"headerlink\" title=\"通过修改配置文件，用以适用mac版的openVpn工具\"></a>通过修改配置文件，用以适用mac版的openVpn工具</h2>\n      <p><img src=\"/pics/21012902/2021-02-openvpn.png\"></p>","more":"<ol>\n<li>下载Tunnelblick</li>\n<li>修改opvn的配置文件</li>\n<li>注释掉client.ovpn中的ip-win32 dynamic -1</li>\n<li>将三个配置文件打包成.tblk后缀名的文件</li>\n<li>在Tunnelblick中，添加该文件</li>\n<li>修改openvpn版本为：2.3.18LibreSSL</li>\n<li>点击“连接”</li>\n</ol>"},{"title":"关于ie8的兼容性","urlname":"关于ie8的兼容性","description":"sss","date":"2021-01-29T16:00:00.000Z","abbrlink":"6c64cc02","_content":"## 描述\n在开发中，需要兼容ie8的情况，记录一下遇到的问题和解决方案\n<!-- more -->\n\n## bootstrap：\n    只能使用2.0及以下版本\n\n## jquery：\n    只能使用1.x 版本\n\n## js语句：\n    严格要求书写，语法规范，属性结束时的逗号\n\n## ie8 JSON未定义的问题：\n    JSON是包含在JScript 5.8中，而为了向下兼容ie8只有在文档模式是”Internet Explorer 8 Standards”的时候才使用JScripte 5.8,其他时候使用JScripte 5.7特性。因此如果文档模式没有声明为”Internet Explorer 8 Standards”，ie8是找不到JSON对象的。因为没有兼容到ie6/7，所以必然在ie6/7中，JSON会出现未定义的问题。我项目中采用的是方法1，完美解决。\n\n### 解决方法：\n    引入定义json的文件json2.js， \n    下载地址：https://github.com/douglascrockford/JSON-js\n    引入包含json的jQuery文件。\n    如果不用兼容到ie6/7，只需要声明”Internet Explorer 8 Standards”模式，方法如下： \n    - 在文档头中添加<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\" >\n    - 使用<!DOCTYPE>来声明文档\n\n## console.log：\n    ie8 执行会报错，程序不执行，打开F12，程序可执行，代码中删掉此语句\n\n## ie8页面的编码问题：\n    当IE右键不勾选自动选择编码的时候，IE是从解析页面标签优先再http header信息，而其他浏览器刚好相反。\n    由于这个原因，title里如果包含了中文字符，就会导致编码自动选择成gb2312导致页面乱码或者空白。\n    因此一定要把<meta http-equiv=Content-Type content=\"text/html; charset=utf-8\">代码放在title标签之前。\n\n## 静态文件编码和浏览器编码不一致：\n    浏览器默认编码，将页面文件的字符集，修改一致","source":"_posts/21013001-关于ie8的兼容性.md","raw":"---\ntitle: 关于ie8的兼容性\nurlname: 关于ie8的兼容性\ntags:\n  - 前端\ncategories: IT\ndescription: sss\ndate: 2021-01-30\nabbrlink: 6c64cc02\n---\n## 描述\n在开发中，需要兼容ie8的情况，记录一下遇到的问题和解决方案\n<!-- more -->\n\n## bootstrap：\n    只能使用2.0及以下版本\n\n## jquery：\n    只能使用1.x 版本\n\n## js语句：\n    严格要求书写，语法规范，属性结束时的逗号\n\n## ie8 JSON未定义的问题：\n    JSON是包含在JScript 5.8中，而为了向下兼容ie8只有在文档模式是”Internet Explorer 8 Standards”的时候才使用JScripte 5.8,其他时候使用JScripte 5.7特性。因此如果文档模式没有声明为”Internet Explorer 8 Standards”，ie8是找不到JSON对象的。因为没有兼容到ie6/7，所以必然在ie6/7中，JSON会出现未定义的问题。我项目中采用的是方法1，完美解决。\n\n### 解决方法：\n    引入定义json的文件json2.js， \n    下载地址：https://github.com/douglascrockford/JSON-js\n    引入包含json的jQuery文件。\n    如果不用兼容到ie6/7，只需要声明”Internet Explorer 8 Standards”模式，方法如下： \n    - 在文档头中添加<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\" >\n    - 使用<!DOCTYPE>来声明文档\n\n## console.log：\n    ie8 执行会报错，程序不执行，打开F12，程序可执行，代码中删掉此语句\n\n## ie8页面的编码问题：\n    当IE右键不勾选自动选择编码的时候，IE是从解析页面标签优先再http header信息，而其他浏览器刚好相反。\n    由于这个原因，title里如果包含了中文字符，就会导致编码自动选择成gb2312导致页面乱码或者空白。\n    因此一定要把<meta http-equiv=Content-Type content=\"text/html; charset=utf-8\">代码放在title标签之前。\n\n## 静态文件编码和浏览器编码不一致：\n    浏览器默认编码，将页面文件的字符集，修改一致","slug":"21013001-关于ie8的兼容性","published":1,"updated":"2021-02-03T08:11:51.298Z","_id":"ckkp57l280007284jd59001vw","comments":1,"layout":"post","photos":[],"link":"","content":"\n        <h2 id=\"描述\"   >\n          <a href=\"#描述\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2>\n      <p>在开发中，需要兼容ie8的情况，记录一下遇到的问题和解决方案</p>\n<a id=\"more\"></a>\n\n\n        <h2 id=\"bootstrap：\"   >\n          <a href=\"#bootstrap：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#bootstrap：\" class=\"headerlink\" title=\"bootstrap：\"></a>bootstrap：</h2>\n      <pre><code>只能使用2.0及以下版本</code></pre>\n\n        <h2 id=\"jquery：\"   >\n          <a href=\"#jquery：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#jquery：\" class=\"headerlink\" title=\"jquery：\"></a>jquery：</h2>\n      <pre><code>只能使用1.x 版本</code></pre>\n\n        <h2 id=\"js语句：\"   >\n          <a href=\"#js语句：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#js语句：\" class=\"headerlink\" title=\"js语句：\"></a>js语句：</h2>\n      <pre><code>严格要求书写，语法规范，属性结束时的逗号</code></pre>\n\n        <h2 id=\"ie8-JSON未定义的问题：\"   >\n          <a href=\"#ie8-JSON未定义的问题：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#ie8-JSON未定义的问题：\" class=\"headerlink\" title=\"ie8 JSON未定义的问题：\"></a>ie8 JSON未定义的问题：</h2>\n      <pre><code>JSON是包含在JScript 5.8中，而为了向下兼容ie8只有在文档模式是”Internet Explorer 8 Standards”的时候才使用JScripte 5.8,其他时候使用JScripte 5.7特性。因此如果文档模式没有声明为”Internet Explorer 8 Standards”，ie8是找不到JSON对象的。因为没有兼容到ie6/7，所以必然在ie6/7中，JSON会出现未定义的问题。我项目中采用的是方法1，完美解决。</code></pre>\n\n        <h3 id=\"解决方法：\"   >\n          <a href=\"#解决方法：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h3>\n      <pre><code>引入定义json的文件json2.js， \n下载地址：https://github.com/douglascrockford/JSON-js\n引入包含json的jQuery文件。\n如果不用兼容到ie6/7，只需要声明”Internet Explorer 8 Standards”模式，方法如下： \n- 在文档头中添加&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=8&quot; &gt;\n- 使用&lt;!DOCTYPE&gt;来声明文档</code></pre>\n\n        <h2 id=\"console-log：\"   >\n          <a href=\"#console-log：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#console-log：\" class=\"headerlink\" title=\"console.log：\"></a>console.log：</h2>\n      <pre><code>ie8 执行会报错，程序不执行，打开F12，程序可执行，代码中删掉此语句</code></pre>\n\n        <h2 id=\"ie8页面的编码问题：\"   >\n          <a href=\"#ie8页面的编码问题：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#ie8页面的编码问题：\" class=\"headerlink\" title=\"ie8页面的编码问题：\"></a>ie8页面的编码问题：</h2>\n      <pre><code>当IE右键不勾选自动选择编码的时候，IE是从解析页面标签优先再http header信息，而其他浏览器刚好相反。\n由于这个原因，title里如果包含了中文字符，就会导致编码自动选择成gb2312导致页面乱码或者空白。\n因此一定要把&lt;meta http-equiv=Content-Type content=&quot;text/html; charset=utf-8&quot;&gt;代码放在title标签之前。</code></pre>\n\n        <h2 id=\"静态文件编码和浏览器编码不一致：\"   >\n          <a href=\"#静态文件编码和浏览器编码不一致：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#静态文件编码和浏览器编码不一致：\" class=\"headerlink\" title=\"静态文件编码和浏览器编码不一致：\"></a>静态文件编码和浏览器编码不一致：</h2>\n      <pre><code>浏览器默认编码，将页面文件的字符集，修改一致</code></pre>\n","site":{"data":{}},"excerpt":"<h2 id=\"描述\"   >\n          <a href=\"#描述\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2>\n      <p>在开发中，需要兼容ie8的情况，记录一下遇到的问题和解决方案</p>","more":"<h2 id=\"bootstrap：\"   >\n          <a href=\"#bootstrap：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#bootstrap：\" class=\"headerlink\" title=\"bootstrap：\"></a>bootstrap：</h2>\n      <pre><code>只能使用2.0及以下版本</code></pre>\n\n        <h2 id=\"jquery：\"   >\n          <a href=\"#jquery：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#jquery：\" class=\"headerlink\" title=\"jquery：\"></a>jquery：</h2>\n      <pre><code>只能使用1.x 版本</code></pre>\n\n        <h2 id=\"js语句：\"   >\n          <a href=\"#js语句：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#js语句：\" class=\"headerlink\" title=\"js语句：\"></a>js语句：</h2>\n      <pre><code>严格要求书写，语法规范，属性结束时的逗号</code></pre>\n\n        <h2 id=\"ie8-JSON未定义的问题：\"   >\n          <a href=\"#ie8-JSON未定义的问题：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#ie8-JSON未定义的问题：\" class=\"headerlink\" title=\"ie8 JSON未定义的问题：\"></a>ie8 JSON未定义的问题：</h2>\n      <pre><code>JSON是包含在JScript 5.8中，而为了向下兼容ie8只有在文档模式是”Internet Explorer 8 Standards”的时候才使用JScripte 5.8,其他时候使用JScripte 5.7特性。因此如果文档模式没有声明为”Internet Explorer 8 Standards”，ie8是找不到JSON对象的。因为没有兼容到ie6/7，所以必然在ie6/7中，JSON会出现未定义的问题。我项目中采用的是方法1，完美解决。</code></pre>\n\n        <h3 id=\"解决方法：\"   >\n          <a href=\"#解决方法：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h3>\n      <pre><code>引入定义json的文件json2.js， \n下载地址：https://github.com/douglascrockford/JSON-js\n引入包含json的jQuery文件。\n如果不用兼容到ie6/7，只需要声明”Internet Explorer 8 Standards”模式，方法如下： \n- 在文档头中添加&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=8&quot; &gt;\n- 使用&lt;!DOCTYPE&gt;来声明文档</code></pre>\n\n        <h2 id=\"console-log：\"   >\n          <a href=\"#console-log：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#console-log：\" class=\"headerlink\" title=\"console.log：\"></a>console.log：</h2>\n      <pre><code>ie8 执行会报错，程序不执行，打开F12，程序可执行，代码中删掉此语句</code></pre>\n\n        <h2 id=\"ie8页面的编码问题：\"   >\n          <a href=\"#ie8页面的编码问题：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#ie8页面的编码问题：\" class=\"headerlink\" title=\"ie8页面的编码问题：\"></a>ie8页面的编码问题：</h2>\n      <pre><code>当IE右键不勾选自动选择编码的时候，IE是从解析页面标签优先再http header信息，而其他浏览器刚好相反。\n由于这个原因，title里如果包含了中文字符，就会导致编码自动选择成gb2312导致页面乱码或者空白。\n因此一定要把&lt;meta http-equiv=Content-Type content=&quot;text/html; charset=utf-8&quot;&gt;代码放在title标签之前。</code></pre>\n\n        <h2 id=\"静态文件编码和浏览器编码不一致：\"   >\n          <a href=\"#静态文件编码和浏览器编码不一致：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#静态文件编码和浏览器编码不一致：\" class=\"headerlink\" title=\"静态文件编码和浏览器编码不一致：\"></a>静态文件编码和浏览器编码不一致：</h2>\n      <pre><code>浏览器默认编码，将页面文件的字符集，修改一致</code></pre>"},{"title":"Git的搭建","date":"2021-01-31T16:00:00.000Z","abbrlink":"42dc65b0","_content":"## 前言\n    版本控制工具，是不可避免要使用到的，为什么选择git呢，不清楚，\n\n## 安装Git\n官网：[Git](https://git-scm.com/)  \n官网文档：[官网文档](https://git-scm.com/book/zh/v2)\n<!--more-->\n1. 官网有好几种安装方式，这里选择安装包安装  \n  ![](/pics/21020102/1612320787427.jpg)\n2. 下载安装包后，默认安装\n3. 安装完成后，设置全局的用户名和邮箱：\n{% codeblock lang:Linux %}\ngit config --global user.name \"username\"\ngit config --global user.email \"xxx@xxx.com\"\n{% endcodeblock %} \n\n","source":"_posts/21020102-Git环境的搭建.md","raw":"---\ntitle: Git的搭建\ntags:\n  - 开发工具\ncategories: IT\ndate: 2021-02-01\nabbrlink: 42dc65b0\n---\n## 前言\n    版本控制工具，是不可避免要使用到的，为什么选择git呢，不清楚，\n\n## 安装Git\n官网：[Git](https://git-scm.com/)  \n官网文档：[官网文档](https://git-scm.com/book/zh/v2)\n<!--more-->\n1. 官网有好几种安装方式，这里选择安装包安装  \n  ![](/pics/21020102/1612320787427.jpg)\n2. 下载安装包后，默认安装\n3. 安装完成后，设置全局的用户名和邮箱：\n{% codeblock lang:Linux %}\ngit config --global user.name \"username\"\ngit config --global user.email \"xxx@xxx.com\"\n{% endcodeblock %} \n\n","slug":"21020102-Git环境的搭建","published":1,"updated":"2021-02-03T08:11:58.045Z","_id":"ckkp57l290008284jaley9dpe","comments":1,"layout":"post","photos":[],"link":"","content":"\n        <h2 id=\"前言\"   >\n          <a href=\"#前言\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n      <pre><code>版本控制工具，是不可避免要使用到的，为什么选择git呢，不清楚，</code></pre>\n\n        <h2 id=\"安装Git\"   >\n          <a href=\"#安装Git\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2>\n      <p>官网：<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://git-scm.com/\" >Git</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span><br>官网文档：<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://git-scm.com/book/zh/v2\" >官网文档</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n<a id=\"more\"></a>\n<ol>\n<li>官网有好几种安装方式，这里选择安装包安装<br><img src=\"/pics/21020102/1612320787427.jpg\"></li>\n<li>下载安装包后，默认安装</li>\n<li>安装完成后，设置全局的用户名和邮箱：<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;username&quot;</span><br><span class=\"line\">git config --global user.email &quot;xxx@xxx.com&quot;</span><br></pre></td></tr></table></div></figure> \n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"   >\n          <a href=\"#前言\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n      <pre><code>版本控制工具，是不可避免要使用到的，为什么选择git呢，不清楚，</code></pre>\n\n        <h2 id=\"安装Git\"   >\n          <a href=\"#安装Git\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2>\n      <p>官网：<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://git-scm.com/\" >Git</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span><br>官网文档：<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://git-scm.com/book/zh/v2\" >官网文档</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>","more":"<ol>\n<li>官网有好几种安装方式，这里选择安装包安装<br><img src=\"/pics/21020102/1612320787427.jpg\"></li>\n<li>下载安装包后，默认安装</li>\n<li>安装完成后，设置全局的用户名和邮箱：<figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;username&quot;</span><br><span class=\"line\">git config --global user.email &quot;xxx@xxx.com&quot;</span><br></pre></td></tr></table></div></figure> \n\n</li>\n</ol>"},{"title":"Node.js 的搭建","date":"2021-01-31T16:00:00.000Z","abbrlink":"9e212a55","_content":"\n## Mac上的Node.js 安装\n1. 从官网下载[Node.js](https://nodejs.org/en/)\n2. 双击下载的文件，默认选项就好，直接安装\n3. 安装完成之后，在终端中输入`npm -v` 和 `node -v` 可查看版本号\n\n## Mac上的Node.js 环境变量配置\n1. 打开终端，进入全局环境变量配置：`vim .bash_profile`\n2. 输入`i` 窗口左下角显示 `-- INSERT --` 进入编辑模式\n3. 在文件中添加 `export PATH=~/.npm-global/bin:$PATH` \n4. 按`esc`键，退出编辑模式，输入`:wq` 保存并退出\n5. 输入`source ~/.bash_profile` 刷新环境变量\n\n## npm的操作\n- 升级npm：`npm install -g npm`  \n- 升级至指定版本：`npm -g install npm@6.8.0` \n---\n## Windows上的Node.js安装\n### 忘了。。。\n","source":"_posts/21020101-Nodejs的搭建.md","raw":"---\ntitle: Node.js 的搭建\ntags:\n  - 开发工具\ncategories: IT\ndate: 2021-02-01\nabbrlink: 9e212a55\n---\n\n## Mac上的Node.js 安装\n1. 从官网下载[Node.js](https://nodejs.org/en/)\n2. 双击下载的文件，默认选项就好，直接安装\n3. 安装完成之后，在终端中输入`npm -v` 和 `node -v` 可查看版本号\n\n## Mac上的Node.js 环境变量配置\n1. 打开终端，进入全局环境变量配置：`vim .bash_profile`\n2. 输入`i` 窗口左下角显示 `-- INSERT --` 进入编辑模式\n3. 在文件中添加 `export PATH=~/.npm-global/bin:$PATH` \n4. 按`esc`键，退出编辑模式，输入`:wq` 保存并退出\n5. 输入`source ~/.bash_profile` 刷新环境变量\n\n## npm的操作\n- 升级npm：`npm install -g npm`  \n- 升级至指定版本：`npm -g install npm@6.8.0` \n---\n## Windows上的Node.js安装\n### 忘了。。。\n","slug":"21020101-Nodejs的搭建","published":1,"updated":"2021-02-03T08:11:55.181Z","_id":"ckkp57l2a0009284jbih18zqd","comments":1,"layout":"post","photos":[],"link":"","content":"\n        <h2 id=\"Mac上的Node-js-安装\"   >\n          <a href=\"#Mac上的Node-js-安装\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Mac上的Node-js-安装\" class=\"headerlink\" title=\"Mac上的Node.js 安装\"></a>Mac上的Node.js 安装</h2>\n      <ol>\n<li>从官网下载<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://nodejs.org/en/\" >Node.js</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></li>\n<li>双击下载的文件，默认选项就好，直接安装</li>\n<li>安装完成之后，在终端中输入<code>npm -v</code> 和 <code>node -v</code> 可查看版本号</li>\n</ol>\n\n        <h2 id=\"Mac上的Node-js-环境变量配置\"   >\n          <a href=\"#Mac上的Node-js-环境变量配置\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Mac上的Node-js-环境变量配置\" class=\"headerlink\" title=\"Mac上的Node.js 环境变量配置\"></a>Mac上的Node.js 环境变量配置</h2>\n      <ol>\n<li>打开终端，进入全局环境变量配置：<code>vim .bash_profile</code></li>\n<li>输入<code>i</code> 窗口左下角显示 <code>-- INSERT --</code> 进入编辑模式</li>\n<li>在文件中添加 <code>export PATH=~/.npm-global/bin:$PATH</code> </li>\n<li>按<code>esc</code>键，退出编辑模式，输入<code>:wq</code> 保存并退出</li>\n<li>输入<code>source ~/.bash_profile</code> 刷新环境变量</li>\n</ol>\n\n        <h2 id=\"npm的操作\"   >\n          <a href=\"#npm的操作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#npm的操作\" class=\"headerlink\" title=\"npm的操作\"></a>npm的操作</h2>\n      <ul>\n<li>升级npm：<code>npm install -g npm</code>  </li>\n<li>升级至指定版本：<code>npm -g install npm@6.8.0</code> </li>\n</ul>\n<hr>\n\n        <h2 id=\"Windows上的Node-js安装\"   >\n          <a href=\"#Windows上的Node-js安装\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Windows上的Node-js安装\" class=\"headerlink\" title=\"Windows上的Node.js安装\"></a>Windows上的Node.js安装</h2>\n      \n        <h3 id=\"忘了。。。\"   >\n          <a href=\"#忘了。。。\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#忘了。。。\" class=\"headerlink\" title=\"忘了。。。\"></a>忘了。。。</h3>\n      ","site":{"data":{}},"excerpt":"","more":"\n        <h2 id=\"Mac上的Node-js-安装\"   >\n          <a href=\"#Mac上的Node-js-安装\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Mac上的Node-js-安装\" class=\"headerlink\" title=\"Mac上的Node.js 安装\"></a>Mac上的Node.js 安装</h2>\n      <ol>\n<li>从官网下载<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://nodejs.org/en/\" >Node.js</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></li>\n<li>双击下载的文件，默认选项就好，直接安装</li>\n<li>安装完成之后，在终端中输入<code>npm -v</code> 和 <code>node -v</code> 可查看版本号</li>\n</ol>\n\n        <h2 id=\"Mac上的Node-js-环境变量配置\"   >\n          <a href=\"#Mac上的Node-js-环境变量配置\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Mac上的Node-js-环境变量配置\" class=\"headerlink\" title=\"Mac上的Node.js 环境变量配置\"></a>Mac上的Node.js 环境变量配置</h2>\n      <ol>\n<li>打开终端，进入全局环境变量配置：<code>vim .bash_profile</code></li>\n<li>输入<code>i</code> 窗口左下角显示 <code>-- INSERT --</code> 进入编辑模式</li>\n<li>在文件中添加 <code>export PATH=~/.npm-global/bin:$PATH</code> </li>\n<li>按<code>esc</code>键，退出编辑模式，输入<code>:wq</code> 保存并退出</li>\n<li>输入<code>source ~/.bash_profile</code> 刷新环境变量</li>\n</ol>\n\n        <h2 id=\"npm的操作\"   >\n          <a href=\"#npm的操作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#npm的操作\" class=\"headerlink\" title=\"npm的操作\"></a>npm的操作</h2>\n      <ul>\n<li>升级npm：<code>npm install -g npm</code>  </li>\n<li>升级至指定版本：<code>npm -g install npm@6.8.0</code> </li>\n</ul>\n<hr>\n\n        <h2 id=\"Windows上的Node-js安装\"   >\n          <a href=\"#Windows上的Node-js安装\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Windows上的Node-js安装\" class=\"headerlink\" title=\"Windows上的Node.js安装\"></a>Windows上的Node.js安装</h2>\n      \n        <h3 id=\"忘了。。。\"   >\n          <a href=\"#忘了。。。\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#忘了。。。\" class=\"headerlink\" title=\"忘了。。。\"></a>忘了。。。</h3>\n      "},{"title":"使用Hexo搭建博客","urlname":"使用Hexo搭建博客","date":"2021-02-01T16:00:00.000Z","abbrlink":"eb656981","_content":"\n## 前言\n    搭建Hexo博客，需要些准备工作的，毕竟这个还是属于灵活定制的个人博客，灵活性高定制性就高，同时，配置项就多，烦躁。。。\n    搭建Hexo属于简易开发过程了，涉及了一些代码，但是代码性不强，没有什么逻辑性，所以搭建过程还是比较简单的，搭建之前的准备：\n<!--more-->\n## 准备\n- 官网文档：<https://hexo.io/zh-cn/docs/>\n<!-- - `Node.js`: [Node.js的搭建](http://wusow.com/post/9e212a55.html) -->\n- `Node.js`: {% post_link 21020101-Nodejs的搭建 %}\n- `Git`: {% post_link 21020102-Git环境的搭建 %}\n<!-- - `Git`: [Git的搭建](http://wusow.com/post/42dc65b0.html) -->\n\n\n## 搭建过程\n1. 通过npm安装Hexo:  `npm install -g hexo-cli`\n2. 在当前路径下，创建名为‘blog’的Hexo项目文件夹：`hexo init blog` \n3. 进入‘blog’文件夹：`cd blog` \n4. 安装依赖： `npm install` \n\n    安装完成后项目结构为：\n    - node_modules: 依赖包（通过执行 `npm install` 命令，产生的文件夹）\n    - public：存放生成的页面（后续环节中通个 `hexo g` 命令生成）\n    - scaffolds：生成文章的一些模板\n    - source：用来存放你的文章（默认文章为`.md`结尾的Markdown格式的文件，存放于当前文件夹下的`_posts`文件夹中）\n    - themes：主题\n    - _config.yml: 博客的配置文件\n    - 其他文件就不要乱动了 \n\n5. 将当前的代码文件打包：`hexo g` （会生成‘public’文件夹）\n6. 开启Hexo服务：`hexo s` (可在本地访问：http://localhost:4000)\n----------\n## github的仓库\n1. 在github上创建一个空的`public`仓库\n2. 将仓库的地址，放在当前项目文件夹下`_config.yml`中（/blog/_config.yml）：\n{% codeblock lang:yml %}\ndeploy:\n    type: git\n    # 建议使用https的仓库地址\n    repository: https://github.com/username/xxx.git\n    branch: master\n{% endcodeblock %}\n3. 通过 `hexo g` 生成静态文件\n4. 通过 `hexo d` 将文件上传至对应的github仓库 \n----------\n\n## 再开发时候的操作\n1. git clone 代码 \n2. npm install \n3. 安装git：npm install hexo-deployer-git --save \n4. 执行 hexo g 生成编译文件 \n5. 执行 hexo d 上传编译文件\n\n----------\n## 小结\n    好麻烦啊。。。。所说个性化定制挺好的，但是各种要配置的，主题也是，看起来怪怪的，写的文章，超链接什么的也不好弄。。。[苦涩]\n","source":"_posts/21020201-使用Hexo搭建博客.md","raw":"---\ntitle: 使用Hexo搭建博客\nurlname: 使用Hexo搭建博客\ntags:\n  - Hexo\ncategories: IT\ndate: 2021-02-02\nabbrlink: eb656981\n---\n\n## 前言\n    搭建Hexo博客，需要些准备工作的，毕竟这个还是属于灵活定制的个人博客，灵活性高定制性就高，同时，配置项就多，烦躁。。。\n    搭建Hexo属于简易开发过程了，涉及了一些代码，但是代码性不强，没有什么逻辑性，所以搭建过程还是比较简单的，搭建之前的准备：\n<!--more-->\n## 准备\n- 官网文档：<https://hexo.io/zh-cn/docs/>\n<!-- - `Node.js`: [Node.js的搭建](http://wusow.com/post/9e212a55.html) -->\n- `Node.js`: {% post_link 21020101-Nodejs的搭建 %}\n- `Git`: {% post_link 21020102-Git环境的搭建 %}\n<!-- - `Git`: [Git的搭建](http://wusow.com/post/42dc65b0.html) -->\n\n\n## 搭建过程\n1. 通过npm安装Hexo:  `npm install -g hexo-cli`\n2. 在当前路径下，创建名为‘blog’的Hexo项目文件夹：`hexo init blog` \n3. 进入‘blog’文件夹：`cd blog` \n4. 安装依赖： `npm install` \n\n    安装完成后项目结构为：\n    - node_modules: 依赖包（通过执行 `npm install` 命令，产生的文件夹）\n    - public：存放生成的页面（后续环节中通个 `hexo g` 命令生成）\n    - scaffolds：生成文章的一些模板\n    - source：用来存放你的文章（默认文章为`.md`结尾的Markdown格式的文件，存放于当前文件夹下的`_posts`文件夹中）\n    - themes：主题\n    - _config.yml: 博客的配置文件\n    - 其他文件就不要乱动了 \n\n5. 将当前的代码文件打包：`hexo g` （会生成‘public’文件夹）\n6. 开启Hexo服务：`hexo s` (可在本地访问：http://localhost:4000)\n----------\n## github的仓库\n1. 在github上创建一个空的`public`仓库\n2. 将仓库的地址，放在当前项目文件夹下`_config.yml`中（/blog/_config.yml）：\n{% codeblock lang:yml %}\ndeploy:\n    type: git\n    # 建议使用https的仓库地址\n    repository: https://github.com/username/xxx.git\n    branch: master\n{% endcodeblock %}\n3. 通过 `hexo g` 生成静态文件\n4. 通过 `hexo d` 将文件上传至对应的github仓库 \n----------\n\n## 再开发时候的操作\n1. git clone 代码 \n2. npm install \n3. 安装git：npm install hexo-deployer-git --save \n4. 执行 hexo g 生成编译文件 \n5. 执行 hexo d 上传编译文件\n\n----------\n## 小结\n    好麻烦啊。。。。所说个性化定制挺好的，但是各种要配置的，主题也是，看起来怪怪的，写的文章，超链接什么的也不好弄。。。[苦涩]\n","slug":"21020201-使用Hexo搭建博客","published":1,"updated":"2021-02-03T08:12:03.615Z","_id":"ckkp57l2b000d284j7sdr65ax","comments":1,"layout":"post","photos":[],"link":"","content":"\n        <h2 id=\"前言\"   >\n          <a href=\"#前言\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n      <pre><code>搭建Hexo博客，需要些准备工作的，毕竟这个还是属于灵活定制的个人博客，灵活性高定制性就高，同时，配置项就多，烦躁。。。\n搭建Hexo属于简易开发过程了，涉及了一些代码，但是代码性不强，没有什么逻辑性，所以搭建过程还是比较简单的，搭建之前的准备：</code></pre>\n<a id=\"more\"></a>\n\n        <h2 id=\"准备\"   >\n          <a href=\"#准备\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2>\n      <ul>\n<li>官网文档：<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://hexo.io/zh-cn/docs/\" >https://hexo.io/zh-cn/docs/</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span><!-- - `Node.js`: [Node.js的搭建](http://wusow.com/post/9e212a55.html) --></li>\n<li><code>Node.js</code>: <a href=\"/post/9e212a55.html\" title=\"Node.js 的搭建\">Node.js 的搭建</a></li>\n<li><code>Git</code>: <a href=\"/post/42dc65b0.html\" title=\"Git的搭建\">Git的搭建</a><!-- - `Git`: [Git的搭建](http://wusow.com/post/42dc65b0.html) -->\n\n\n</li>\n</ul>\n\n        <h2 id=\"搭建过程\"   >\n          <a href=\"#搭建过程\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#搭建过程\" class=\"headerlink\" title=\"搭建过程\"></a>搭建过程</h2>\n      <ol>\n<li><p>通过npm安装Hexo:  <code>npm install -g hexo-cli</code></p>\n</li>\n<li><p>在当前路径下，创建名为‘blog’的Hexo项目文件夹：<code>hexo init blog</code> </p>\n</li>\n<li><p>进入‘blog’文件夹：<code>cd blog</code> </p>\n</li>\n<li><p>安装依赖： <code>npm install</code> </p>\n<p> 安装完成后项目结构为：</p>\n<ul>\n<li>node_modules: 依赖包（通过执行 <code>npm install</code> 命令，产生的文件夹）</li>\n<li>public：存放生成的页面（后续环节中通个 <code>hexo g</code> 命令生成）</li>\n<li>scaffolds：生成文章的一些模板</li>\n<li>source：用来存放你的文章（默认文章为<code>.md</code>结尾的Markdown格式的文件，存放于当前文件夹下的<code>_posts</code>文件夹中）</li>\n<li>themes：主题</li>\n<li>_config.yml: 博客的配置文件</li>\n<li>其他文件就不要乱动了 </li>\n</ul>\n</li>\n<li><p>将当前的代码文件打包：<code>hexo g</code> （会生成‘public’文件夹）</p>\n</li>\n<li><p>开启Hexo服务：<code>hexo s</code> (可在本地访问：<span class=\"exturl\"><a class=\"exturl__link\"   href=\"http://localhost:4000/\" >http://localhost:4000</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span>)</p>\n</li>\n</ol>\n<hr>\n\n        <h2 id=\"github的仓库\"   >\n          <a href=\"#github的仓库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#github的仓库\" class=\"headerlink\" title=\"github的仓库\"></a>github的仓库</h2>\n      <ol>\n<li>在github上创建一个空的<code>public</code>仓库</li>\n<li>将仓库的地址，放在当前项目文件夹下<code>_config.yml</code>中（/blog/_config.yml）：<figure class=\"highlight yml\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">    <span class=\"comment\"># 建议使用https的仓库地址</span></span><br><span class=\"line\">    <span class=\"attr\">repository:</span> <span class=\"string\">https://github.com/username/xxx.git</span></span><br><span class=\"line\">    <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></div></figure></li>\n<li>通过 <code>hexo g</code> 生成静态文件</li>\n<li>通过 <code>hexo d</code> 将文件上传至对应的github仓库 </li>\n</ol>\n<hr>\n\n        <h2 id=\"再开发时候的操作\"   >\n          <a href=\"#再开发时候的操作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#再开发时候的操作\" class=\"headerlink\" title=\"再开发时候的操作\"></a>再开发时候的操作</h2>\n      <ol>\n<li>git clone 代码 </li>\n<li>npm install </li>\n<li>安装git：npm install hexo-deployer-git –save </li>\n<li>执行 hexo g 生成编译文件 </li>\n<li>执行 hexo d 上传编译文件</li>\n</ol>\n<hr>\n\n        <h2 id=\"小结\"   >\n          <a href=\"#小结\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2>\n      <pre><code>好麻烦啊。。。。所说个性化定制挺好的，但是各种要配置的，主题也是，看起来怪怪的，写的文章，超链接什么的也不好弄。。。[苦涩]</code></pre>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"   >\n          <a href=\"#前言\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n      <pre><code>搭建Hexo博客，需要些准备工作的，毕竟这个还是属于灵活定制的个人博客，灵活性高定制性就高，同时，配置项就多，烦躁。。。\n搭建Hexo属于简易开发过程了，涉及了一些代码，但是代码性不强，没有什么逻辑性，所以搭建过程还是比较简单的，搭建之前的准备：</code></pre>","more":"<h2 id=\"准备\"   >\n          <a href=\"#准备\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2>\n      <ul>\n<li>官网文档：<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://hexo.io/zh-cn/docs/\" >https://hexo.io/zh-cn/docs/</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span><!-- - `Node.js`: [Node.js的搭建](http://wusow.com/post/9e212a55.html) --></li>\n<li><code>Node.js</code>: <a href=\"/post/9e212a55.html\" title=\"Node.js 的搭建\">Node.js 的搭建</a></li>\n<li><code>Git</code>: <a href=\"/post/42dc65b0.html\" title=\"Git的搭建\">Git的搭建</a><!-- - `Git`: [Git的搭建](http://wusow.com/post/42dc65b0.html) -->\n\n\n</li>\n</ul>\n\n        <h2 id=\"搭建过程\"   >\n          <a href=\"#搭建过程\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#搭建过程\" class=\"headerlink\" title=\"搭建过程\"></a>搭建过程</h2>\n      <ol>\n<li><p>通过npm安装Hexo:  <code>npm install -g hexo-cli</code></p>\n</li>\n<li><p>在当前路径下，创建名为‘blog’的Hexo项目文件夹：<code>hexo init blog</code> </p>\n</li>\n<li><p>进入‘blog’文件夹：<code>cd blog</code> </p>\n</li>\n<li><p>安装依赖： <code>npm install</code> </p>\n<p> 安装完成后项目结构为：</p>\n<ul>\n<li>node_modules: 依赖包（通过执行 <code>npm install</code> 命令，产生的文件夹）</li>\n<li>public：存放生成的页面（后续环节中通个 <code>hexo g</code> 命令生成）</li>\n<li>scaffolds：生成文章的一些模板</li>\n<li>source：用来存放你的文章（默认文章为<code>.md</code>结尾的Markdown格式的文件，存放于当前文件夹下的<code>_posts</code>文件夹中）</li>\n<li>themes：主题</li>\n<li>_config.yml: 博客的配置文件</li>\n<li>其他文件就不要乱动了 </li>\n</ul>\n</li>\n<li><p>将当前的代码文件打包：<code>hexo g</code> （会生成‘public’文件夹）</p>\n</li>\n<li><p>开启Hexo服务：<code>hexo s</code> (可在本地访问：<span class=\"exturl\"><a class=\"exturl__link\"   href=\"http://localhost:4000/\" >http://localhost:4000</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span>)</p>\n</li>\n</ol>\n<hr>\n\n        <h2 id=\"github的仓库\"   >\n          <a href=\"#github的仓库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#github的仓库\" class=\"headerlink\" title=\"github的仓库\"></a>github的仓库</h2>\n      <ol>\n<li>在github上创建一个空的<code>public</code>仓库</li>\n<li>将仓库的地址，放在当前项目文件夹下<code>_config.yml</code>中（/blog/_config.yml）：<figure class=\"highlight yml\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">    <span class=\"comment\"># 建议使用https的仓库地址</span></span><br><span class=\"line\">    <span class=\"attr\">repository:</span> <span class=\"string\">https://github.com/username/xxx.git</span></span><br><span class=\"line\">    <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></div></figure></li>\n<li>通过 <code>hexo g</code> 生成静态文件</li>\n<li>通过 <code>hexo d</code> 将文件上传至对应的github仓库 </li>\n</ol>\n<hr>\n\n        <h2 id=\"再开发时候的操作\"   >\n          <a href=\"#再开发时候的操作\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#再开发时候的操作\" class=\"headerlink\" title=\"再开发时候的操作\"></a>再开发时候的操作</h2>\n      <ol>\n<li>git clone 代码 </li>\n<li>npm install </li>\n<li>安装git：npm install hexo-deployer-git –save </li>\n<li>执行 hexo g 生成编译文件 </li>\n<li>执行 hexo d 上传编译文件</li>\n</ol>\n<hr>\n\n        <h2 id=\"小结\"   >\n          <a href=\"#小结\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2>\n      <pre><code>好麻烦啊。。。。所说个性化定制挺好的，但是各种要配置的，主题也是，看起来怪怪的，写的文章，超链接什么的也不好弄。。。[苦涩]</code></pre>"},{"title":"Git命令","date":"2021-01-31T16:00:00.000Z","abbrlink":"5aedbe48","_content":"\n### 查看全局的用户名和邮箱\n```\ngit config user.name\ngit config user.email\n```\n<!--more-->\n### 初始化当前文件夹为本地仓库\n`git init` \n\n### 从目标地址下载\n`git clone [url]`\n\n###  添加所有改动文件至版本管理\n`git add --all`\n\n###  从当前位置commit\n`git commit -m \"提交的内容描述\" `\n\n###  从当前位置commit\n    使用一次新的commit，替代上一次提交\n    如果代码没有任何新变化，则用来改写上一次commit的提交信息\n`git commit --amend -m \"提交的内容描述\" `\n\n###  列出分支\n    不加参数为列出所有本地分支，-r 列出所有远程分支，-a 所有本地和远程分支\n`git branch`\n\n###  切换分支\n`git checkout [branch-name]`\n\n###  合并指定分支到当前分支\n`git merge [branch]`\n\n###  增加一个新的远程仓库，并命名\n`git remote add [shortname] [url]`\n\n###  拉取远程至本地\n`git pull <远程主机名> <远程分支名>:<本地分支名>`\n    示例：$ git pull https://gitee.com/xxx/xxx.git master:master\n\n###  拉取到指定仓库\n`git pull [仓库名] [branch]`\n\n###  上传到指定仓库\n`git push [仓库名] [branch]`\n\n###  将未提交的变化移除\n`git stash`\n\n###  将未提交的变化移除\n`git stash`\n\n### 强制覆盖：\n```\ngit fetch --all\ngit reset --hard origin/master\ngit pull\n```","source":"_posts/21020103-Git常用命令.md","raw":"---\ntitle: Git命令\ntags:\n  - 开发工具\n  - Git\ncategories: IT\ndate: 2021-02-01\nabbrlink: 5aedbe48\n---\n\n### 查看全局的用户名和邮箱\n```\ngit config user.name\ngit config user.email\n```\n<!--more-->\n### 初始化当前文件夹为本地仓库\n`git init` \n\n### 从目标地址下载\n`git clone [url]`\n\n###  添加所有改动文件至版本管理\n`git add --all`\n\n###  从当前位置commit\n`git commit -m \"提交的内容描述\" `\n\n###  从当前位置commit\n    使用一次新的commit，替代上一次提交\n    如果代码没有任何新变化，则用来改写上一次commit的提交信息\n`git commit --amend -m \"提交的内容描述\" `\n\n###  列出分支\n    不加参数为列出所有本地分支，-r 列出所有远程分支，-a 所有本地和远程分支\n`git branch`\n\n###  切换分支\n`git checkout [branch-name]`\n\n###  合并指定分支到当前分支\n`git merge [branch]`\n\n###  增加一个新的远程仓库，并命名\n`git remote add [shortname] [url]`\n\n###  拉取远程至本地\n`git pull <远程主机名> <远程分支名>:<本地分支名>`\n    示例：$ git pull https://gitee.com/xxx/xxx.git master:master\n\n###  拉取到指定仓库\n`git pull [仓库名] [branch]`\n\n###  上传到指定仓库\n`git push [仓库名] [branch]`\n\n###  将未提交的变化移除\n`git stash`\n\n###  将未提交的变化移除\n`git stash`\n\n### 强制覆盖：\n```\ngit fetch --all\ngit reset --hard origin/master\ngit pull\n```","slug":"21020103-Git常用命令","published":1,"updated":"2021-02-03T08:11:23.134Z","_id":"ckkp57l2c000e284jeadn1dz2","comments":1,"layout":"post","photos":[],"link":"","content":"\n        <h3 id=\"查看全局的用户名和邮箱\"   >\n          <a href=\"#查看全局的用户名和邮箱\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#查看全局的用户名和邮箱\" class=\"headerlink\" title=\"查看全局的用户名和邮箱\"></a>查看全局的用户名和邮箱</h3>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></div></figure>\n<a id=\"more\"></a>\n\n        <h3 id=\"初始化当前文件夹为本地仓库\"   >\n          <a href=\"#初始化当前文件夹为本地仓库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#初始化当前文件夹为本地仓库\" class=\"headerlink\" title=\"初始化当前文件夹为本地仓库\"></a>初始化当前文件夹为本地仓库</h3>\n      <p><code>git init</code> </p>\n\n        <h3 id=\"从目标地址下载\"   >\n          <a href=\"#从目标地址下载\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#从目标地址下载\" class=\"headerlink\" title=\"从目标地址下载\"></a>从目标地址下载</h3>\n      <p><code>git clone [url]</code></p>\n\n        <h3 id=\"添加所有改动文件至版本管理\"   >\n          <a href=\"#添加所有改动文件至版本管理\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#添加所有改动文件至版本管理\" class=\"headerlink\" title=\"添加所有改动文件至版本管理\"></a>添加所有改动文件至版本管理</h3>\n      <p><code>git add --all</code></p>\n\n        <h3 id=\"从当前位置commit\"   >\n          <a href=\"#从当前位置commit\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#从当前位置commit\" class=\"headerlink\" title=\"从当前位置commit\"></a>从当前位置commit</h3>\n      <p><code>git commit -m &quot;提交的内容描述&quot; </code></p>\n\n        <h3 id=\"从当前位置commit-1\"   >\n          <a href=\"#从当前位置commit-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#从当前位置commit-1\" class=\"headerlink\" title=\"从当前位置commit\"></a>从当前位置commit</h3>\n      <pre><code>使用一次新的commit，替代上一次提交\n如果代码没有任何新变化，则用来改写上一次commit的提交信息</code></pre>\n<p><code>git commit --amend -m &quot;提交的内容描述&quot; </code></p>\n\n        <h3 id=\"列出分支\"   >\n          <a href=\"#列出分支\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#列出分支\" class=\"headerlink\" title=\"列出分支\"></a>列出分支</h3>\n      <pre><code>不加参数为列出所有本地分支，-r 列出所有远程分支，-a 所有本地和远程分支</code></pre>\n<p><code>git branch</code></p>\n\n        <h3 id=\"切换分支\"   >\n          <a href=\"#切换分支\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3>\n      <p><code>git checkout [branch-name]</code></p>\n\n        <h3 id=\"合并指定分支到当前分支\"   >\n          <a href=\"#合并指定分支到当前分支\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#合并指定分支到当前分支\" class=\"headerlink\" title=\"合并指定分支到当前分支\"></a>合并指定分支到当前分支</h3>\n      <p><code>git merge [branch]</code></p>\n\n        <h3 id=\"增加一个新的远程仓库，并命名\"   >\n          <a href=\"#增加一个新的远程仓库，并命名\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#增加一个新的远程仓库，并命名\" class=\"headerlink\" title=\"增加一个新的远程仓库，并命名\"></a>增加一个新的远程仓库，并命名</h3>\n      <p><code>git remote add [shortname] [url]</code></p>\n\n        <h3 id=\"拉取远程至本地\"   >\n          <a href=\"#拉取远程至本地\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#拉取远程至本地\" class=\"headerlink\" title=\"拉取远程至本地\"></a>拉取远程至本地</h3>\n      <p><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code><br>    示例：$ git pull <span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://gitee.com/xxx/xxx.git\" >https://gitee.com/xxx/xxx.git</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span> master:master</p>\n\n        <h3 id=\"拉取到指定仓库\"   >\n          <a href=\"#拉取到指定仓库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#拉取到指定仓库\" class=\"headerlink\" title=\"拉取到指定仓库\"></a>拉取到指定仓库</h3>\n      <p><code>git pull [仓库名] [branch]</code></p>\n\n        <h3 id=\"上传到指定仓库\"   >\n          <a href=\"#上传到指定仓库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#上传到指定仓库\" class=\"headerlink\" title=\"上传到指定仓库\"></a>上传到指定仓库</h3>\n      <p><code>git push [仓库名] [branch]</code></p>\n\n        <h3 id=\"将未提交的变化移除\"   >\n          <a href=\"#将未提交的变化移除\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#将未提交的变化移除\" class=\"headerlink\" title=\"将未提交的变化移除\"></a>将未提交的变化移除</h3>\n      <p><code>git stash</code></p>\n\n        <h3 id=\"将未提交的变化移除-1\"   >\n          <a href=\"#将未提交的变化移除-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#将未提交的变化移除-1\" class=\"headerlink\" title=\"将未提交的变化移除\"></a>将未提交的变化移除</h3>\n      <p><code>git stash</code></p>\n\n        <h3 id=\"强制覆盖：\"   >\n          <a href=\"#强制覆盖：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#强制覆盖：\" class=\"headerlink\" title=\"强制覆盖：\"></a>强制覆盖：</h3>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin&#x2F;master</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></div></figure>","site":{"data":{}},"excerpt":"<h3 id=\"查看全局的用户名和邮箱\"   >\n          <a href=\"#查看全局的用户名和邮箱\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#查看全局的用户名和邮箱\" class=\"headerlink\" title=\"查看全局的用户名和邮箱\"></a>查看全局的用户名和邮箱</h3>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></div></figure>","more":"<h3 id=\"初始化当前文件夹为本地仓库\"   >\n          <a href=\"#初始化当前文件夹为本地仓库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#初始化当前文件夹为本地仓库\" class=\"headerlink\" title=\"初始化当前文件夹为本地仓库\"></a>初始化当前文件夹为本地仓库</h3>\n      <p><code>git init</code> </p>\n\n        <h3 id=\"从目标地址下载\"   >\n          <a href=\"#从目标地址下载\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#从目标地址下载\" class=\"headerlink\" title=\"从目标地址下载\"></a>从目标地址下载</h3>\n      <p><code>git clone [url]</code></p>\n\n        <h3 id=\"添加所有改动文件至版本管理\"   >\n          <a href=\"#添加所有改动文件至版本管理\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#添加所有改动文件至版本管理\" class=\"headerlink\" title=\"添加所有改动文件至版本管理\"></a>添加所有改动文件至版本管理</h3>\n      <p><code>git add --all</code></p>\n\n        <h3 id=\"从当前位置commit\"   >\n          <a href=\"#从当前位置commit\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#从当前位置commit\" class=\"headerlink\" title=\"从当前位置commit\"></a>从当前位置commit</h3>\n      <p><code>git commit -m &quot;提交的内容描述&quot; </code></p>\n\n        <h3 id=\"从当前位置commit-1\"   >\n          <a href=\"#从当前位置commit-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#从当前位置commit-1\" class=\"headerlink\" title=\"从当前位置commit\"></a>从当前位置commit</h3>\n      <pre><code>使用一次新的commit，替代上一次提交\n如果代码没有任何新变化，则用来改写上一次commit的提交信息</code></pre>\n<p><code>git commit --amend -m &quot;提交的内容描述&quot; </code></p>\n\n        <h3 id=\"列出分支\"   >\n          <a href=\"#列出分支\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#列出分支\" class=\"headerlink\" title=\"列出分支\"></a>列出分支</h3>\n      <pre><code>不加参数为列出所有本地分支，-r 列出所有远程分支，-a 所有本地和远程分支</code></pre>\n<p><code>git branch</code></p>\n\n        <h3 id=\"切换分支\"   >\n          <a href=\"#切换分支\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3>\n      <p><code>git checkout [branch-name]</code></p>\n\n        <h3 id=\"合并指定分支到当前分支\"   >\n          <a href=\"#合并指定分支到当前分支\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#合并指定分支到当前分支\" class=\"headerlink\" title=\"合并指定分支到当前分支\"></a>合并指定分支到当前分支</h3>\n      <p><code>git merge [branch]</code></p>\n\n        <h3 id=\"增加一个新的远程仓库，并命名\"   >\n          <a href=\"#增加一个新的远程仓库，并命名\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#增加一个新的远程仓库，并命名\" class=\"headerlink\" title=\"增加一个新的远程仓库，并命名\"></a>增加一个新的远程仓库，并命名</h3>\n      <p><code>git remote add [shortname] [url]</code></p>\n\n        <h3 id=\"拉取远程至本地\"   >\n          <a href=\"#拉取远程至本地\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#拉取远程至本地\" class=\"headerlink\" title=\"拉取远程至本地\"></a>拉取远程至本地</h3>\n      <p><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code><br>    示例：$ git pull <span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://gitee.com/xxx/xxx.git\" >https://gitee.com/xxx/xxx.git</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span> master:master</p>\n\n        <h3 id=\"拉取到指定仓库\"   >\n          <a href=\"#拉取到指定仓库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#拉取到指定仓库\" class=\"headerlink\" title=\"拉取到指定仓库\"></a>拉取到指定仓库</h3>\n      <p><code>git pull [仓库名] [branch]</code></p>\n\n        <h3 id=\"上传到指定仓库\"   >\n          <a href=\"#上传到指定仓库\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#上传到指定仓库\" class=\"headerlink\" title=\"上传到指定仓库\"></a>上传到指定仓库</h3>\n      <p><code>git push [仓库名] [branch]</code></p>\n\n        <h3 id=\"将未提交的变化移除\"   >\n          <a href=\"#将未提交的变化移除\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#将未提交的变化移除\" class=\"headerlink\" title=\"将未提交的变化移除\"></a>将未提交的变化移除</h3>\n      <p><code>git stash</code></p>\n\n        <h3 id=\"将未提交的变化移除-1\"   >\n          <a href=\"#将未提交的变化移除-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#将未提交的变化移除-1\" class=\"headerlink\" title=\"将未提交的变化移除\"></a>将未提交的变化移除</h3>\n      <p><code>git stash</code></p>\n\n        <h3 id=\"强制覆盖：\"   >\n          <a href=\"#强制覆盖：\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#强制覆盖：\" class=\"headerlink\" title=\"强制覆盖：\"></a>强制覆盖：</h3>\n      <figure class=\"highlight plain\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin&#x2F;master</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></div></figure>"},{"title":"Hexo部署平台的选用","urlname":"Hexo部署平台的选用","date":"2021-02-01T16:00:00.000Z","abbrlink":"808168d2","_content":"\n## 远程仓库的选用\n        虽然Hexo的官网推荐的是GitHub Pages，但是还是有其他的选择作为比较的，在搭建的时候，就用过Gitee和coding来部署过，可以说是各有优缺点，但是综合下来，还是用的GitHub，没错，真香。。。\n        这里就记录一下对我来说的特点和一些缺点吧，方便以后要换平台了，也能找找理由\n<!--more-->\n### GitHub\n#### 特点\n* 部署快，上传了静态文件后，生效时间短\n* 可以使用自己的域名来访问博客\n* 通过`hexo d`命令，将静态文件上传至对应的仓库中，并不是上传的源码\n### 缺点\n* 毕竟GitHub是国外的，偶尔国内的网，访问起GitHub会有些问题\n* 域名可以自定义，就意味着，需要配置很多的东西\n\n### Gitee码云\n### 特点\n* 国内的代码仓库，访问速度不慢，也不会出现访问不到的情况\n### 缺点\n* 目前还无法自定义域名，不需要自定义域名的话，就很不错了\n\n### coding\n### 特点\n* 国内的代码仓库，访问速度不慢，也不会出现访问不了的情况\n* 可以自定义域名\n### 缺点\n* 因为用了自定义域名，所以每次部署的时候，生效时间有点久\n\n## 小结\n    最后还是使用GitHub，创建了两个仓库，一个上传静态文件，通过GitHub Pages部署Hexo博客，一个上传源码，以防万一\n    同时，还往Gitee和coding上都传了源码，哈哈哈哈哈哈，真不嫌自己麻烦","source":"_posts/21020202-使用Hexo搭建博客.md","raw":"---\ntitle: Hexo部署平台的选用\nurlname: Hexo部署平台的选用\ntags:\n  - Hexo\ncategories: IT\ndate: 2021-02-02\nabbrlink: 808168d2\n---\n\n## 远程仓库的选用\n        虽然Hexo的官网推荐的是GitHub Pages，但是还是有其他的选择作为比较的，在搭建的时候，就用过Gitee和coding来部署过，可以说是各有优缺点，但是综合下来，还是用的GitHub，没错，真香。。。\n        这里就记录一下对我来说的特点和一些缺点吧，方便以后要换平台了，也能找找理由\n<!--more-->\n### GitHub\n#### 特点\n* 部署快，上传了静态文件后，生效时间短\n* 可以使用自己的域名来访问博客\n* 通过`hexo d`命令，将静态文件上传至对应的仓库中，并不是上传的源码\n### 缺点\n* 毕竟GitHub是国外的，偶尔国内的网，访问起GitHub会有些问题\n* 域名可以自定义，就意味着，需要配置很多的东西\n\n### Gitee码云\n### 特点\n* 国内的代码仓库，访问速度不慢，也不会出现访问不到的情况\n### 缺点\n* 目前还无法自定义域名，不需要自定义域名的话，就很不错了\n\n### coding\n### 特点\n* 国内的代码仓库，访问速度不慢，也不会出现访问不了的情况\n* 可以自定义域名\n### 缺点\n* 因为用了自定义域名，所以每次部署的时候，生效时间有点久\n\n## 小结\n    最后还是使用GitHub，创建了两个仓库，一个上传静态文件，通过GitHub Pages部署Hexo博客，一个上传源码，以防万一\n    同时，还往Gitee和coding上都传了源码，哈哈哈哈哈哈，真不嫌自己麻烦","slug":"21020202-使用Hexo搭建博客","published":1,"updated":"2021-02-03T08:12:06.613Z","_id":"ckkp57l2e000i284j9bmb6hh9","comments":1,"layout":"post","photos":[],"link":"","content":"\n        <h2 id=\"远程仓库的选用\"   >\n          <a href=\"#远程仓库的选用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#远程仓库的选用\" class=\"headerlink\" title=\"远程仓库的选用\"></a>远程仓库的选用</h2>\n      <pre><code>    虽然Hexo的官网推荐的是GitHub Pages，但是还是有其他的选择作为比较的，在搭建的时候，就用过Gitee和coding来部署过，可以说是各有优缺点，但是综合下来，还是用的GitHub，没错，真香。。。\n    这里就记录一下对我来说的特点和一些缺点吧，方便以后要换平台了，也能找找理由</code></pre>\n<a id=\"more\"></a>\n\n        <h3 id=\"GitHub\"   >\n          <a href=\"#GitHub\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h3>\n      \n        <h4 id=\"特点\"   >\n          <a href=\"#特点\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4>\n      <ul>\n<li>部署快，上传了静态文件后，生效时间短</li>\n<li>可以使用自己的域名来访问博客</li>\n<li>通过<code>hexo d</code>命令，将静态文件上传至对应的仓库中，并不是上传的源码\n        <h3 id=\"缺点\"   >\n          <a href=\"#缺点\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3>\n      </li>\n<li>毕竟GitHub是国外的，偶尔国内的网，访问起GitHub会有些问题</li>\n<li>域名可以自定义，就意味着，需要配置很多的东西</li>\n</ul>\n\n        <h3 id=\"Gitee码云\"   >\n          <a href=\"#Gitee码云\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Gitee码云\" class=\"headerlink\" title=\"Gitee码云\"></a>Gitee码云</h3>\n      \n        <h3 id=\"特点-1\"   >\n          <a href=\"#特点-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h3>\n      <ul>\n<li>国内的代码仓库，访问速度不慢，也不会出现访问不到的情况\n        <h3 id=\"缺点-1\"   >\n          <a href=\"#缺点-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3>\n      </li>\n<li>目前还无法自定义域名，不需要自定义域名的话，就很不错了</li>\n</ul>\n\n        <h3 id=\"coding\"   >\n          <a href=\"#coding\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#coding\" class=\"headerlink\" title=\"coding\"></a>coding</h3>\n      \n        <h3 id=\"特点-2\"   >\n          <a href=\"#特点-2\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h3>\n      <ul>\n<li>国内的代码仓库，访问速度不慢，也不会出现访问不了的情况</li>\n<li>可以自定义域名\n        <h3 id=\"缺点-2\"   >\n          <a href=\"#缺点-2\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3>\n      </li>\n<li>因为用了自定义域名，所以每次部署的时候，生效时间有点久</li>\n</ul>\n\n        <h2 id=\"小结\"   >\n          <a href=\"#小结\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2>\n      <pre><code>最后还是使用GitHub，创建了两个仓库，一个上传静态文件，通过GitHub Pages部署Hexo博客，一个上传源码，以防万一\n同时，还往Gitee和coding上都传了源码，哈哈哈哈哈哈，真不嫌自己麻烦</code></pre>\n","site":{"data":{}},"excerpt":"<h2 id=\"远程仓库的选用\"   >\n          <a href=\"#远程仓库的选用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#远程仓库的选用\" class=\"headerlink\" title=\"远程仓库的选用\"></a>远程仓库的选用</h2>\n      <pre><code>    虽然Hexo的官网推荐的是GitHub Pages，但是还是有其他的选择作为比较的，在搭建的时候，就用过Gitee和coding来部署过，可以说是各有优缺点，但是综合下来，还是用的GitHub，没错，真香。。。\n    这里就记录一下对我来说的特点和一些缺点吧，方便以后要换平台了，也能找找理由</code></pre>","more":"<h3 id=\"GitHub\"   >\n          <a href=\"#GitHub\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h3>\n      \n        <h4 id=\"特点\"   >\n          <a href=\"#特点\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4>\n      <ul>\n<li>部署快，上传了静态文件后，生效时间短</li>\n<li>可以使用自己的域名来访问博客</li>\n<li>通过<code>hexo d</code>命令，将静态文件上传至对应的仓库中，并不是上传的源码\n        <h3 id=\"缺点\"   >\n          <a href=\"#缺点\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3>\n      </li>\n<li>毕竟GitHub是国外的，偶尔国内的网，访问起GitHub会有些问题</li>\n<li>域名可以自定义，就意味着，需要配置很多的东西</li>\n</ul>\n\n        <h3 id=\"Gitee码云\"   >\n          <a href=\"#Gitee码云\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Gitee码云\" class=\"headerlink\" title=\"Gitee码云\"></a>Gitee码云</h3>\n      \n        <h3 id=\"特点-1\"   >\n          <a href=\"#特点-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h3>\n      <ul>\n<li>国内的代码仓库，访问速度不慢，也不会出现访问不到的情况\n        <h3 id=\"缺点-1\"   >\n          <a href=\"#缺点-1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3>\n      </li>\n<li>目前还无法自定义域名，不需要自定义域名的话，就很不错了</li>\n</ul>\n\n        <h3 id=\"coding\"   >\n          <a href=\"#coding\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#coding\" class=\"headerlink\" title=\"coding\"></a>coding</h3>\n      \n        <h3 id=\"特点-2\"   >\n          <a href=\"#特点-2\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h3>\n      <ul>\n<li>国内的代码仓库，访问速度不慢，也不会出现访问不了的情况</li>\n<li>可以自定义域名\n        <h3 id=\"缺点-2\"   >\n          <a href=\"#缺点-2\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3>\n      </li>\n<li>因为用了自定义域名，所以每次部署的时候，生效时间有点久</li>\n</ul>\n\n        <h2 id=\"小结\"   >\n          <a href=\"#小结\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2>\n      <pre><code>最后还是使用GitHub，创建了两个仓库，一个上传静态文件，通过GitHub Pages部署Hexo博客，一个上传源码，以防万一\n同时，还往Gitee和coding上都传了源码，哈哈哈哈哈哈，真不嫌自己麻烦</code></pre>"},{"title":"Hexo搭建中的问题和解决方式","urlname":"Hexo搭建中的问题和解决方式","date":"2021-02-02T16:00:00.000Z","abbrlink":"ab48c5d0","_content":"    记录一些操作方式，免得自己忘了，又到处去找。。。\n\n## 文章引用\n官网提供的引用文章的方式`{% post_path filename %}`没有起作用，因为自己的目录结构，在`_posts`下还有一层分类的文件夹，所以无法链接到文章，只能通过Markdown自己的链接方式，来引用文章，但是需要有提前准备：\n1. 安装插件：`npm install hexo-abbrlink --save`\n<!--more-->\n2. 在Hexo项目的配置文件`_config.yml`中，修改： \n{% codeblock lang:yml %}\npermalink: post/:abbrlink.html\n{% endcodeblock %} \n3. 在Hexo项目的配置文件`_config.yml`中，添加：\n{% codeblock lang:yml %}\nabbrlink:\n  alg: crc32  # 算法：crc16(default) and crc32\n  rep: hex    # 进制：dec(default) and hex\n{% endcodeblock %} \n\n这样的话，会给每篇文章在`Front-matter`中生成一个唯一码`abbrlink`，然后通过Markdown的链接，来引用文章。\n\n---\n## 图片路径设置\n因为不确定在文章中，会用到多少图片，也不想用图床功能，所以在`/source`中新建了一个'pics'文件夹，用来存放图片，并在`pics`中，建立文件夹，文件夹名与文章的前缀编号一致，方便管理。\n在文中，使用`![](/pics/xxx/xxx.jpg)`来引用图片\n\n---\n## 自定义域名\n通过GitHub Pages页面配置了自定义域名，但是只在上传的静态文件中新增了一个`CNAME`文件，本地重新编译静态文件，再上传后，就会丢失这个静态文件，所以，在笨的的`/source`文件夹中，穿件一个`CNAME`文件，并将配置在GitHub Pages中的域名，填写在此处，再次编译后，`public`文件夹中，就会包含该文件。\n\n\n\n","source":"_posts/21020301-使用Hexo搭建博客.md","raw":"---\ntitle: Hexo搭建中的问题和解决方式\nurlname: Hexo搭建中的问题和解决方式\ntags:\n  - Hexo\ncategories: IT\ndate: 2021-02-03\nabbrlink: ab48c5d0\n---\n    记录一些操作方式，免得自己忘了，又到处去找。。。\n\n## 文章引用\n官网提供的引用文章的方式`{% post_path filename %}`没有起作用，因为自己的目录结构，在`_posts`下还有一层分类的文件夹，所以无法链接到文章，只能通过Markdown自己的链接方式，来引用文章，但是需要有提前准备：\n1. 安装插件：`npm install hexo-abbrlink --save`\n<!--more-->\n2. 在Hexo项目的配置文件`_config.yml`中，修改： \n{% codeblock lang:yml %}\npermalink: post/:abbrlink.html\n{% endcodeblock %} \n3. 在Hexo项目的配置文件`_config.yml`中，添加：\n{% codeblock lang:yml %}\nabbrlink:\n  alg: crc32  # 算法：crc16(default) and crc32\n  rep: hex    # 进制：dec(default) and hex\n{% endcodeblock %} \n\n这样的话，会给每篇文章在`Front-matter`中生成一个唯一码`abbrlink`，然后通过Markdown的链接，来引用文章。\n\n---\n## 图片路径设置\n因为不确定在文章中，会用到多少图片，也不想用图床功能，所以在`/source`中新建了一个'pics'文件夹，用来存放图片，并在`pics`中，建立文件夹，文件夹名与文章的前缀编号一致，方便管理。\n在文中，使用`![](/pics/xxx/xxx.jpg)`来引用图片\n\n---\n## 自定义域名\n通过GitHub Pages页面配置了自定义域名，但是只在上传的静态文件中新增了一个`CNAME`文件，本地重新编译静态文件，再上传后，就会丢失这个静态文件，所以，在笨的的`/source`文件夹中，穿件一个`CNAME`文件，并将配置在GitHub Pages中的域名，填写在此处，再次编译后，`public`文件夹中，就会包含该文件。\n\n\n\n","slug":"21020301-使用Hexo搭建博客","published":1,"updated":"2021-02-03T08:12:09.979Z","_id":"ckkp57l2f000k284jbvk92lti","comments":1,"layout":"post","photos":[],"link":"","content":"<pre><code>记录一些操作方式，免得自己忘了，又到处去找。。。</code></pre>\n\n        <h2 id=\"文章引用\"   >\n          <a href=\"#文章引用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#文章引用\" class=\"headerlink\" title=\"文章引用\"></a>文章引用</h2>\n      <p>官网提供的引用文章的方式<code>&#123;% post_path filename %&#125;</code>没有起作用，因为自己的目录结构，在<code>_posts</code>下还有一层分类的文件夹，所以无法链接到文章，只能通过Markdown自己的链接方式，来引用文章，但是需要有提前准备：</p>\n<ol>\n<li>安装插件：<code>npm install hexo-abbrlink --save</code><a id=\"more\"></a></li>\n<li>在Hexo项目的配置文件<code>_config.yml</code>中，修改： <figure class=\"highlight yml\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">post/:abbrlink.html</span></span><br></pre></td></tr></table></div></figure> </li>\n<li>在Hexo项目的配置文件<code>_config.yml</code>中，添加：<figure class=\"highlight yml\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">abbrlink:</span></span><br><span class=\"line\">  <span class=\"attr\">alg:</span> <span class=\"string\">crc32</span>  <span class=\"comment\"># 算法：crc16(default) and crc32</span></span><br><span class=\"line\">  <span class=\"attr\">rep:</span> <span class=\"string\">hex</span>    <span class=\"comment\"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></div></figure> \n\n</li>\n</ol>\n<p>这样的话，会给每篇文章在<code>Front-matter</code>中生成一个唯一码<code>abbrlink</code>，然后通过Markdown的链接，来引用文章。</p>\n<hr>\n\n        <h2 id=\"图片路径设置\"   >\n          <a href=\"#图片路径设置\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#图片路径设置\" class=\"headerlink\" title=\"图片路径设置\"></a>图片路径设置</h2>\n      <p>因为不确定在文章中，会用到多少图片，也不想用图床功能，所以在<code>/source</code>中新建了一个’pics’文件夹，用来存放图片，并在<code>pics</code>中，建立文件夹，文件夹名与文章的前缀编号一致，方便管理。<br>在文中，使用<code>![](/pics/xxx/xxx.jpg)</code>来引用图片</p>\n<hr>\n\n        <h2 id=\"自定义域名\"   >\n          <a href=\"#自定义域名\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h2>\n      <p>通过GitHub Pages页面配置了自定义域名，但是只在上传的静态文件中新增了一个<code>CNAME</code>文件，本地重新编译静态文件，再上传后，就会丢失这个静态文件，所以，在笨的的<code>/source</code>文件夹中，穿件一个<code>CNAME</code>文件，并将配置在GitHub Pages中的域名，填写在此处，再次编译后，<code>public</code>文件夹中，就会包含该文件。</p>\n","site":{"data":{}},"excerpt":"<pre><code>记录一些操作方式，免得自己忘了，又到处去找。。。</code></pre>\n\n        <h2 id=\"文章引用\"   >\n          <a href=\"#文章引用\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#文章引用\" class=\"headerlink\" title=\"文章引用\"></a>文章引用</h2>\n      <p>官网提供的引用文章的方式<code>&#123;% post_path filename %&#125;</code>没有起作用，因为自己的目录结构，在<code>_posts</code>下还有一层分类的文件夹，所以无法链接到文章，只能通过Markdown自己的链接方式，来引用文章，但是需要有提前准备：</p>\n<ol>\n<li>安装插件：<code>npm install hexo-abbrlink --save</code>","more":"</li>\n<li>在Hexo项目的配置文件<code>_config.yml</code>中，修改： <figure class=\"highlight yml\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">post/:abbrlink.html</span></span><br></pre></td></tr></table></div></figure> </li>\n<li>在Hexo项目的配置文件<code>_config.yml</code>中，添加：<figure class=\"highlight yml\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">abbrlink:</span></span><br><span class=\"line\">  <span class=\"attr\">alg:</span> <span class=\"string\">crc32</span>  <span class=\"comment\"># 算法：crc16(default) and crc32</span></span><br><span class=\"line\">  <span class=\"attr\">rep:</span> <span class=\"string\">hex</span>    <span class=\"comment\"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></div></figure> \n\n</li>\n</ol>\n<p>这样的话，会给每篇文章在<code>Front-matter</code>中生成一个唯一码<code>abbrlink</code>，然后通过Markdown的链接，来引用文章。</p>\n<hr>\n\n        <h2 id=\"图片路径设置\"   >\n          <a href=\"#图片路径设置\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#图片路径设置\" class=\"headerlink\" title=\"图片路径设置\"></a>图片路径设置</h2>\n      <p>因为不确定在文章中，会用到多少图片，也不想用图床功能，所以在<code>/source</code>中新建了一个’pics’文件夹，用来存放图片，并在<code>pics</code>中，建立文件夹，文件夹名与文章的前缀编号一致，方便管理。<br>在文中，使用<code>![](/pics/xxx/xxx.jpg)</code>来引用图片</p>\n<hr>\n\n        <h2 id=\"自定义域名\"   >\n          <a href=\"#自定义域名\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h2>\n      <p>通过GitHub Pages页面配置了自定义域名，但是只在上传的静态文件中新增了一个<code>CNAME</code>文件，本地重新编译静态文件，再上传后，就会丢失这个静态文件，所以，在笨的的<code>/source</code>文件夹中，穿件一个<code>CNAME</code>文件，并将配置在GitHub Pages中的域名，填写在此处，再次编译后，<code>public</code>文件夹中，就会包含该文件。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckkp57l230001284j7281dcxl","category_id":"ckkp57l260004284jaf9aekle","_id":"ckkp57l2c000f284jaxbr03sa"},{"post_id":"ckkp57l2b000d284j7sdr65ax","category_id":"ckkp57l2a000a284j6sr440o4","_id":"ckkp57l2g000l284jcicvfrcb"},{"post_id":"ckkp57l250003284jcy8s31ie","category_id":"ckkp57l2a000a284j6sr440o4","_id":"ckkp57l2g000o284j4i6e1xkj"},{"post_id":"ckkp57l2c000e284jeadn1dz2","category_id":"ckkp57l2a000a284j6sr440o4","_id":"ckkp57l2h000q284j9b30aco0"},{"post_id":"ckkp57l2e000i284j9bmb6hh9","category_id":"ckkp57l2a000a284j6sr440o4","_id":"ckkp57l2i000t284jdcwthp9f"},{"post_id":"ckkp57l280007284jd59001vw","category_id":"ckkp57l2a000a284j6sr440o4","_id":"ckkp57l2i000v284j3wkp39ao"},{"post_id":"ckkp57l2f000k284jbvk92lti","category_id":"ckkp57l2a000a284j6sr440o4","_id":"ckkp57l2i000x284j6p3s4qfo"},{"post_id":"ckkp57l290008284jaley9dpe","category_id":"ckkp57l2a000a284j6sr440o4","_id":"ckkp57l2i000z284j7mt4058k"},{"post_id":"ckkp57l2a0009284jbih18zqd","category_id":"ckkp57l2a000a284j6sr440o4","_id":"ckkp57l2j0011284jef4dhkmy"}],"PostTag":[{"post_id":"ckkp57l230001284j7281dcxl","tag_id":"ckkp57l270005284jc9ah5c91","_id":"ckkp57l2b000c284j2q1a0jiw"},{"post_id":"ckkp57l250003284jcy8s31ie","tag_id":"ckkp57l2b000b284j9b318oba","_id":"ckkp57l2f000j284j32jqc939"},{"post_id":"ckkp57l280007284jd59001vw","tag_id":"ckkp57l2d000h284j5o8m4dbh","_id":"ckkp57l2h000p284jdore82ii"},{"post_id":"ckkp57l290008284jaley9dpe","tag_id":"ckkp57l2b000b284j9b318oba","_id":"ckkp57l2i000u284jarqtbp4l"},{"post_id":"ckkp57l2a0009284jbih18zqd","tag_id":"ckkp57l2b000b284j9b318oba","_id":"ckkp57l2i000y284jceoeeqoy"},{"post_id":"ckkp57l2b000d284j7sdr65ax","tag_id":"ckkp57l2i000w284j2xzzca6j","_id":"ckkp57l2j0012284j9d94by3x"},{"post_id":"ckkp57l2c000e284jeadn1dz2","tag_id":"ckkp57l2b000b284j9b318oba","_id":"ckkp57l2k0014284jg1r3eor3"},{"post_id":"ckkp57l2c000e284jeadn1dz2","tag_id":"ckkp57l2j0010284jftul7ea4","_id":"ckkp57l2k0015284jglq84du3"},{"post_id":"ckkp57l2e000i284j9bmb6hh9","tag_id":"ckkp57l2i000w284j2xzzca6j","_id":"ckkp57l2k0017284jcss2hw2e"},{"post_id":"ckkp57l2f000k284jbvk92lti","tag_id":"ckkp57l2i000w284j2xzzca6j","_id":"ckkp57l2l0018284jehw42n4v"}],"Tag":[{"name":"杂谈","_id":"ckkp57l270005284jc9ah5c91"},{"name":"开发工具","_id":"ckkp57l2b000b284j9b318oba"},{"name":"前端","_id":"ckkp57l2d000h284j5o8m4dbh"},{"name":"Hexo","_id":"ckkp57l2i000w284j2xzzca6j"},{"name":"Git","_id":"ckkp57l2j0010284jftul7ea4"}]}}